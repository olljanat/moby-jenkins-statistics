Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2-stable (i-0cc48a269b098a0de) (x86_64 ec2 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2-stable amd64 docker us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision 2cb26cfe9cbf8a64c5046c74d65f4528b22e67f4 (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 2cb26cfe9cbf8a64c5046c74d65f4528b22e67f4
Commit message: "Merge pull request #38301 from cyphar/waitgroup-limits"
 > git rev-list --no-walk 2cb26cfe9cbf8a64c5046c74d65f4528b22e67f4 # timeout=10
Set build name.
New build name is '#34425'
[Docker-PRs] $ /bin/bash /tmp/jenkins6439944236804406050.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/34425/head -> origin/pr/34425
Merge made by the 'recursive' strategy.
 api/server/router/image/image_routes.go |  3 +++
 image/tarexport/load.go                 | 37 ++++++++++++++++++++-------------
 pkg/chrootarchive/archive_unix.go       |  8 ++++++-
 3 files changed, 32 insertions(+), 16 deletions(-)
Sending build context to Docker daemon  45.09MB
Step 1/93 : FROM golang:1.11.4 AS base
 ---> 2422e4d43e15
Step 2/93 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> d5458df7311b
Step 3/93 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> 457e0339aa23
Step 4/93 : FROM base AS criu
 ---> 457e0339aa23
Step 5/93 : ENV CRIU_VERSION 3.6
 ---> Using cache
 ---> 499ee0ab29d6
Step 6/93 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> c10307a178c1
Step 7/93 : FROM base AS registry
 ---> 457e0339aa23
Step 8/93 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> 433a2226560f
Step 9/93 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> f1f45eaeb74e
Step 10/93 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 53b6f4559f33
Step 11/93 : FROM base AS docker-py
 ---> 457e0339aa23
Step 12/93 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> 420d51ada4b7
Step 13/93 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 5af0ab371011
Step 14/93 : FROM base AS swagger
 ---> 457e0339aa23
Step 15/93 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> a334a99dbe51
Step 16/93 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> d2f887586104
Step 17/93 : FROM base AS frozen-images
 ---> 457e0339aa23
Step 18/93 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 070e29901cfc
Step 19/93 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> 5760b4a09968
Step 20/93 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> 81c8a943590b
Step 21/93 : FROM base AS runtime-dev
 ---> 457e0339aa23
Step 22/93 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> be7e091cb6e7
Step 23/93 : FROM base AS tomlv
 ---> 457e0339aa23
Step 24/93 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> d494999498d8
Step 25/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 12d67c3be68c
Step 26/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 7ab73b0befd3
Step 27/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> f369392a8c0e
Step 28/93 : FROM base AS vndr
 ---> 457e0339aa23
Step 29/93 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> bc3ca3f897e0
Step 30/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 5a4d5bfef8e4
Step 31/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> ccf813789cb0
Step 32/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 001ca3d1a08f
Step 33/93 : FROM base AS containerd
 ---> 457e0339aa23
Step 34/93 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> d997d584458a
Step 35/93 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> 70d324aa54e1
Step 36/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 4226f2cb01ef
Step 37/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 3ed29071b202
Step 38/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> b9b9e88f0285
Step 39/93 : FROM base AS proxy
 ---> 457e0339aa23
Step 40/93 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> c34b948fc320
Step 41/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> c024045777d1
Step 42/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> fe3dba9aefd7
Step 43/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 66e6c30b2836
Step 44/93 : FROM base AS gometalinter
 ---> 457e0339aa23
Step 45/93 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 4cd721b28b01
Step 46/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> f6f2d29cd97b
Step 47/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> ecc2ebd4009c
Step 48/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 99a92831ba4c
Step 49/93 : FROM base AS dockercli
 ---> 457e0339aa23
Step 50/93 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> d05de154345a
Step 51/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> f761080f0572
Step 52/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> e7a7c66fcb25
Step 53/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 6b27e4382c47
Step 54/93 : FROM runtime-dev AS runc
 ---> be7e091cb6e7
Step 55/93 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> 78229afde0c0
Step 56/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 90f2eadafd25
Step 57/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> f7e2e3c717b2
Step 58/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 2ceecc3a4437
Step 59/93 : FROM base AS tini
 ---> 457e0339aa23
Step 60/93 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> 9542ddb41408
Step 61/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 765b10f61511
Step 62/93 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> 825511811bd0
Step 63/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> a60926970e4e
Step 64/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> b99babd11487
Step 65/93 : FROM runtime-dev AS dev
 ---> be7e091cb6e7
Step 66/93 : RUN groupadd -r docker
 ---> Using cache
 ---> 07901be4d87d
Step 67/93 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> 1786dc8f447e
Step 68/93 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> 37d743d56fb3
Step 69/93 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> d0d6073cfe35
Step 70/93 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 1e20f6622d3e
Step 71/93 : RUN ldconfig
 ---> Using cache
 ---> 8b91b6bb2bc5
Step 72/93 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	--no-install-recommends
 ---> Using cache
 ---> 0db1a131dc00
Step 73/93 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> 8f184bffb6a2
Step 74/93 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> a8ead1800238
Step 75/93 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> 00351ddf07fa
Step 76/93 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> 16fdf62fd1f8
Step 77/93 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> c9bbed7981f2
Step 78/93 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> d56398bf6432
Step 79/93 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> 91daaf7cb5ec
Step 80/93 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> 044e97dcd1b6
Step 81/93 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> 9a33b9aead40
Step 82/93 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 9a3e4d0450cc
Step 83/93 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> ec0b657a1976
Step 84/93 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> 311f63311f39
Step 85/93 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> ca138a624afe
Step 86/93 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 0afc50d4f23e
Step 87/93 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> 3bde820c0d87
Step 88/93 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> 1c87aaf35dcd
Step 89/93 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> 85d82d8bf3c8
Step 90/93 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> 822a4a25943b
Step 91/93 : VOLUME /var/lib/docker
 ---> Using cache
 ---> b93659074c89
Step 92/93 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> e6d85b186186
Step 93/93 : COPY . /go/src/github.com/docker/docker
 ---> ff77bbc38848
Successfully built ff77bbc38848
Successfully tagged docker:4e57154
Congratulations!  All commits are properly signed with the DCO!
These files import internal code: (either directly or indirectly)
 - pkg/chrootarchive/archive_unix.go imports github.com/docker/docker/errdefs

Build step 'Execute shell' marked build as failure
Set build name.
New build name is '#34425'
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins4538063838580849550.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr52167
Error: No such container: docker-pr52167
+ true
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins896468439735892384.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ + xargs tar -czf bundles.tar.gz
find bundles -name *.log -o -name *.prof -o -name integration.test
tar: Cowardly refusing to create an empty archive
Try 'tar --help' or 'tar --usage' for more information.
+ true
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: FAILURE
