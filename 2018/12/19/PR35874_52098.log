Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2-stable (i-05d3f77beabc84f2e) (x86_64 ec2 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2-stable amd64 docker us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision d1117e8e104060c543a8dd2147fe5c3f8686ee39 (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f d1117e8e104060c543a8dd2147fe5c3f8686ee39
Commit message: "Merge pull request #38372 from FabianKramm/fix-darwin-compile"
 > git rev-list --no-walk d1117e8e104060c543a8dd2147fe5c3f8686ee39 # timeout=10
Set build name.
New build name is '#35874'
[Docker-PRs] $ /bin/bash /tmp/jenkins6780154607345144032.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/35874/head -> origin/pr/35874
Merge made by the 'recursive' strategy.
 daemon/archive_tarcopyoptions.go                   |  1 +
 daemon/archive_tarcopyoptions_unix.go              | 19 +++---------------
 .../docker_cli_cp_to_container_unix_test.go        | 23 ++++++++++++++++++++++
 3 files changed, 27 insertions(+), 16 deletions(-)
Sending build context to Docker daemon  45.08MB
Step 1/93 : FROM golang:1.11.3 AS base
 ---> bbf428bade77
Step 2/93 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> 98e4753dc831
Step 3/93 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> 3598cb0a0045
Step 4/93 : FROM base AS criu
 ---> 3598cb0a0045
Step 5/93 : ENV CRIU_VERSION 3.6
 ---> Using cache
 ---> e094401ed222
Step 6/93 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> 4c109d4a5dd5
Step 7/93 : FROM base AS registry
 ---> 3598cb0a0045
Step 8/93 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> d21f171a4d77
Step 9/93 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> e5eda75426b5
Step 10/93 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 4cecb51ef4c6
Step 11/93 : FROM base AS docker-py
 ---> 3598cb0a0045
Step 12/93 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> c81099be0b7b
Step 13/93 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 97794cbf3b60
Step 14/93 : FROM base AS swagger
 ---> 3598cb0a0045
Step 15/93 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> cf76b23893ce
Step 16/93 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 41d98876bb20
Step 17/93 : FROM base AS frozen-images
 ---> 3598cb0a0045
Step 18/93 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> aaf25df85d95
Step 19/93 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> 43d8421b556b
Step 20/93 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> 1bf285948348
Step 21/93 : FROM base AS runtime-dev
 ---> 3598cb0a0045
Step 22/93 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> 36b0f44618d5
Step 23/93 : FROM base AS tomlv
 ---> 3598cb0a0045
Step 24/93 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> 3e173a3d7475
Step 25/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 95bc5839aace
Step 26/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 22c0740b1587
Step 27/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> adc8516b9162
Step 28/93 : FROM base AS vndr
 ---> 3598cb0a0045
Step 29/93 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> 8ec3bdda70b7
Step 30/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 72b98acd24a9
Step 31/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 2d9743f288ff
Step 32/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 764bafd0d31f
Step 33/93 : FROM base AS containerd
 ---> 3598cb0a0045
Step 34/93 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> a74092579109
Step 35/93 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> b80af75751a0
Step 36/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 53ec6009c7d4
Step 37/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> afcc3ef718f0
Step 38/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 8f55c06660e8
Step 39/93 : FROM base AS proxy
 ---> 3598cb0a0045
Step 40/93 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> e49e8d23aec2
Step 41/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 327d59f16b84
Step 42/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> f229a4fe2a5e
Step 43/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 8e71e3e049bd
Step 44/93 : FROM base AS gometalinter
 ---> 3598cb0a0045
Step 45/93 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 9156ae9a74b3
Step 46/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 6cfebdccef63
Step 47/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> db4a62087982
Step 48/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 3d5215c4170c
Step 49/93 : FROM base AS dockercli
 ---> 3598cb0a0045
Step 50/93 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> ef0c39b6f8dc
Step 51/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 14daed78f6c4
Step 52/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 4f9be66dd07b
Step 53/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 3de90e29c214
Step 54/93 : FROM runtime-dev AS runc
 ---> 36b0f44618d5
Step 55/93 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> 47f919bc8dbd
Step 56/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> f948e5c60dfb
Step 57/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 9a7a478765ba
Step 58/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> d570efc143b1
Step 59/93 : FROM base AS tini
 ---> 3598cb0a0045
Step 60/93 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> effe8c972464
Step 61/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> de9d982c0c2d
Step 62/93 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> 268cdb518925
Step 63/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 2cb7b8dfa229
Step 64/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> a0ea66d3010a
Step 65/93 : FROM runtime-dev AS dev
 ---> 36b0f44618d5
Step 66/93 : RUN groupadd -r docker
 ---> Using cache
 ---> 4bd4e70f9e40
Step 67/93 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> 290970db4edc
Step 68/93 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> bda3691a36c8
Step 69/93 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> c8d82d5f25f1
Step 70/93 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 23d893e41cfb
Step 71/93 : RUN ldconfig
 ---> Using cache
 ---> 1f43efbb292d
Step 72/93 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	--no-install-recommends
 ---> Using cache
 ---> 8daf5c3a04da
Step 73/93 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> 4649f82bdf21
Step 74/93 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> d52a1763a1bb
Step 75/93 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> cbc02629969d
Step 76/93 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> c409c97ab213
Step 77/93 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> 127f408c68a8
Step 78/93 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> 3fde94ea8189
Step 79/93 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> a7df868c841d
Step 80/93 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> 1a1e128d7759
Step 81/93 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> 4380ddc1ebee
Step 82/93 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 8eba285160fa
Step 83/93 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> 42980681a79d
Step 84/93 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> 321ca6cb7821
Step 85/93 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> 83cd938a9364
Step 86/93 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> b2200a8ecc56
Step 87/93 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> fe87d4e7bde7
Step 88/93 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> ee319dc5f4c0
Step 89/93 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> 4edfc065d7d6
Step 90/93 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> e2531ec87265
Step 91/93 : VOLUME /var/lib/docker
 ---> Using cache
 ---> 74f6b44f737c
Step 92/93 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> 6e6cceb73d6c
Step 93/93 : COPY . /go/src/github.com/docker/docker
 ---> ad57602581b4
Successfully built ad57602581b4
Successfully tagged docker:b25efd3
Congratulations!  All commits are properly signed with the DCO!
Congratulations!  "./pkg/..." is safely isolated from internal code.
No api/types/ or api/swagger.yaml changes in diff.
Congratulations!  No testing.T found.
Congratulations!  All toml source files changed here have valid syntax.
Congratulations!  Changelog CHANGELOG.md is well-formed.
Congratulations!  Changelog CHANGELOG.md dates are in descending order.
The following new tests were added to integration-cli:

+func (s *DockerSuite) TestCpToContainerWithoutPermissions(c *check.C) {

integration-cli is deprecated. Please add an API integration test to
./integration/COMPONENT/. See ./TESTING.md for more details.

Build step 'Execute shell' marked build as failure
Set build name.
New build name is '#35874'
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins749865417717153851.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr52098
Error: No such container: docker-pr52098
+ true
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins5378662646989992552.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ find bundles -name *.log -o -name *.prof -o -name integration.test
+ xargs tar -czf bundles.tar.gz
tar: Cowardly refusing to create an empty archive
Try 'tar --help' or 'tar --usage' for more information.
+ true
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: FAILURE
