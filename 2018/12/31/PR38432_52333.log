Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2-stable (i-0f8f72163f3ad0956) (x86_64 ec2 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2-stable amd64 docker us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision f76d6a078d881f410c00e8d900dcdfc2e026c841 (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f f76d6a078d881f410c00e8d900dcdfc2e026c841
Commit message: "Merge pull request #38370 from farnasirim/36413-bind-dir-skip-copy"
 > git rev-list --no-walk f76d6a078d881f410c00e8d900dcdfc2e026c841 # timeout=10
Set build name.
New build name is '#38432'
[Docker-PRs] $ /bin/bash /tmp/jenkins1639553092217712018.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/38432/head -> origin/pr/38432
Merge made by the 'recursive' strategy.
 hack/ci/windows.ps1                                |   9 +-
 integration-cli/check_test.go                      |   3 +-
 integration-cli/docker_api_swarm_node_test.go      |   2 -
 integration-cli/docker_api_swarm_service_test.go   |  79 ---------
 .../docker_api_swarm_service_unix_test.go          |  90 ++++++++++
 integration-cli/docker_api_swarm_test.go           |   2 -
 integration-cli/docker_cli_swarm_test.go           | 196 ---------------------
 integration-cli/docker_cli_swarm_unix_test.go      | 195 ++++++++++++++++++++
 internal/test/daemon/daemon.go                     |  10 +-
 internal/test/daemon/daemon_unix.go                |   6 +
 internal/test/daemon/daemon_windows.go             |   6 +
 internal/test/daemon/swarm.go                      |   4 -
 internal/test/daemon/swarm_unix.go                 |   7 +
 internal/test/daemon/swarm_windows.go              |   7 +
 14 files changed, 321 insertions(+), 295 deletions(-)
 create mode 100644 integration-cli/docker_api_swarm_service_unix_test.go
 create mode 100644 internal/test/daemon/swarm_unix.go
 create mode 100644 internal/test/daemon/swarm_windows.go
Sending build context to Docker daemon  45.09MB
Step 1/94 : FROM golang:1.11.4 AS base
 ---> 343df9d12b7b
Step 2/94 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> 555909be8a46
Step 3/94 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> cd11cd5507b4
Step 4/94 : FROM base AS criu
 ---> cd11cd5507b4
Step 5/94 : ENV CRIU_VERSION 3.6
 ---> Using cache
 ---> 8a93fb309d66
Step 6/94 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> 0ad200c96f3b
Step 7/94 : FROM base AS registry
 ---> cd11cd5507b4
Step 8/94 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> bbd072f6d0e2
Step 9/94 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> cfd353093594
Step 10/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 9d843371b2a1
Step 11/94 : FROM base AS docker-py
 ---> cd11cd5507b4
Step 12/94 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> eebbbe88e9ba
Step 13/94 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 03d418f25987
Step 14/94 : FROM base AS swagger
 ---> cd11cd5507b4
Step 15/94 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> cbf2b3135088
Step 16/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 704785fb555d
Step 17/94 : FROM base AS frozen-images
 ---> cd11cd5507b4
Step 18/94 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 2a4773a4b0dc
Step 19/94 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> 57a8a1175d3e
Step 20/94 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> 043d122e1233
Step 21/94 : FROM base AS runtime-dev
 ---> cd11cd5507b4
Step 22/94 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> e32bcecd57e8
Step 23/94 : FROM base AS tomlv
 ---> cd11cd5507b4
Step 24/94 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> f62b232fec42
Step 25/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 026d113da28f
Step 26/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> e0e8e1b67819
Step 27/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> ec931afb1b16
Step 28/94 : FROM base AS vndr
 ---> cd11cd5507b4
Step 29/94 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> 372d5679e60f
Step 30/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 14893d7bade9
Step 31/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 53e3e9f1ac27
Step 32/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 5906b742adb8
Step 33/94 : FROM base AS containerd
 ---> cd11cd5507b4
Step 34/94 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> 2651f049b0a3
Step 35/94 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> d76144e82f5c
Step 36/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 0a3c0f70b990
Step 37/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> f700901e9d76
Step 38/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> c1515109c759
Step 39/94 : FROM base AS proxy
 ---> cd11cd5507b4
Step 40/94 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> 179c5420233d
Step 41/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> b6a5d319e2b2
Step 42/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 0bf62cd1c83d
Step 43/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 150d3c36d531
Step 44/94 : FROM base AS gometalinter
 ---> cd11cd5507b4
Step 45/94 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> c76823ec0511
Step 46/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 444e01cb3dc0
Step 47/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> c2794a0bc7fe
Step 48/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 0edc6b04bfab
Step 49/94 : FROM base AS dockercli
 ---> cd11cd5507b4
Step 50/94 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> 5470109b321a
Step 51/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 46263e8254fc
Step 52/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 7b06b5993156
Step 53/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> bded3f287be4
Step 54/94 : FROM runtime-dev AS runc
 ---> e32bcecd57e8
Step 55/94 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> 15f1705fba70
Step 56/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 3b1241f17cd0
Step 57/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> d6c713e75a5d
Step 58/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> f6225a366542
Step 59/94 : FROM base AS tini
 ---> cd11cd5507b4
Step 60/94 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> 148c8d2458e4
Step 61/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 45e4817107f8
Step 62/94 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> 46baf659e477
Step 63/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 6a49a4e5d24e
Step 64/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> a1fbef9157c9
Step 65/94 : FROM runtime-dev AS dev
 ---> e32bcecd57e8
Step 66/94 : RUN groupadd -r docker
 ---> Using cache
 ---> d2ccadb7b88f
Step 67/94 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> fb6aab1b100a
Step 68/94 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> b81faf547286
Step 69/94 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> b885364006f5
Step 70/94 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 7d239803ae70
Step 71/94 : RUN ldconfig
 ---> Using cache
 ---> 704b6194969e
Step 72/94 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	--no-install-recommends
 ---> Using cache
 ---> 6ae489f31ffd
Step 73/94 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> 1c6ecc5f37e2
Step 74/94 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> 8132620ad283
Step 75/94 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> 747e9b004b61
Step 76/94 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> 48f1e753b93f
Step 77/94 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> 24653c7e3cfe
Step 78/94 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> f8032e541ab3
Step 79/94 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> 7fa47ba7a1bf
Step 80/94 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> 5113545c0182
Step 81/94 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> 5a086570a017
Step 82/94 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 394949043891
Step 83/94 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> 3a8270e657d9
Step 84/94 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> 340f12741dbe
Step 85/94 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> caf1bb452ae5
Step 86/94 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 884bd0666813
Step 87/94 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> c40b2bf4244d
Step 88/94 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> 64d1492582d7
Step 89/94 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> c00752b2de8b
Step 90/94 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> 8d8f4204de6f
Step 91/94 : VOLUME /var/lib/docker
 ---> Using cache
 ---> c191fe752179
Step 92/94 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> f8ace9114dd1
Step 93/94 : FROM dev AS final
 ---> f8ace9114dd1
Step 94/94 : COPY . /go/src/github.com/docker/docker
 ---> 421674831845
Successfully built 421674831845
Successfully tagged docker:a07478b
Congratulations!  All commits are properly signed with the DCO!
Congratulations!  "./pkg/..." is safely isolated from internal code.
No api/types/ or api/swagger.yaml changes in diff.
Congratulations!  No testing.T found.
Congratulations!  All toml source files changed here have valid syntax.
Congratulations!  Changelog CHANGELOG.md is well-formed.
Congratulations!  Changelog CHANGELOG.md dates are in descending order.
The following new tests were added to integration-cli:

+func (s *DockerSwarmSuite) TestSwarmNetworkPlugin(c *check.C) {

integration-cli is deprecated. Please add an API integration test to
./integration/COMPONENT/. See ./TESTING.md for more details.

Build step 'Execute shell' marked build as failure
Set build name.
New build name is '#38432'
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins7293637342348886083.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr52333
Error: No such container: docker-pr52333
+ true
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins7999256774602354751.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ find bundles -name *.log -o -name *.prof -o -name integration.test
+ xargs tar -czf bundles.tar.gz
tar: Cowardly refusing to create an empty archive
Try 'tar --help' or 'tar --usage' for more information.
+ true
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: FAILURE
