Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2-stable (i-0fe923cf7f19bdf15) (x86_64 ec2 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2-stable amd64 docker us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision f76d6a078d881f410c00e8d900dcdfc2e026c841 (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f f76d6a078d881f410c00e8d900dcdfc2e026c841
Commit message: "Merge pull request #38370 from farnasirim/36413-bind-dir-skip-copy"
 > git rev-list --no-walk f76d6a078d881f410c00e8d900dcdfc2e026c841 # timeout=10
Set build name.
New build name is '#38432'
[Docker-PRs] $ /bin/bash /tmp/jenkins900272028483750478.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/38432/head -> origin/pr/38432
Merge made by the 'recursive' strategy.
 hack/ci/windows.ps1                                |   9 +-
 integration-cli/check_test.go                      |   3 +-
 integration-cli/docker_api_swarm_node_test.go      |   2 -
 integration-cli/docker_api_swarm_service_test.go   |  79 ---------
 .../docker_api_swarm_service_unix_test.go          |  90 ++++++++++
 integration-cli/docker_api_swarm_test.go           |   2 -
 integration-cli/docker_cli_swarm_test.go           | 196 ---------------------
 integration-cli/docker_cli_swarm_unix_test.go      | 195 ++++++++++++++++++++
 internal/test/daemon/daemon.go                     |  14 +-
 internal/test/daemon/daemon_unix.go                |   6 +
 internal/test/daemon/daemon_windows.go             |   6 +
 internal/test/daemon/swarm.go                      |   4 -
 internal/test/daemon/swarm_unix.go                 |   7 +
 internal/test/daemon/swarm_windows.go              |   7 +
 14 files changed, 324 insertions(+), 296 deletions(-)
 create mode 100644 integration-cli/docker_api_swarm_service_unix_test.go
 create mode 100644 internal/test/daemon/swarm_unix.go
 create mode 100644 internal/test/daemon/swarm_windows.go
Sending build context to Docker daemon  45.09MB
Step 1/94 : FROM golang:1.11.4 AS base
 ---> 343df9d12b7b
Step 2/94 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> 034427f1344d
Step 3/94 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> e0dfc2949ed1
Step 4/94 : FROM base AS criu
 ---> e0dfc2949ed1
Step 5/94 : ENV CRIU_VERSION 3.6
 ---> Using cache
 ---> a5f253044683
Step 6/94 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> 737ee466e1e2
Step 7/94 : FROM base AS registry
 ---> e0dfc2949ed1
Step 8/94 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> 2b04b66180c1
Step 9/94 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> 2d39bb403fdc
Step 10/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 4fb1bd6f956e
Step 11/94 : FROM base AS docker-py
 ---> e0dfc2949ed1
Step 12/94 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> 2390de2117c6
Step 13/94 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 426abecd9390
Step 14/94 : FROM base AS swagger
 ---> e0dfc2949ed1
Step 15/94 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> 42324ce891d7
Step 16/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 567e260665ef
Step 17/94 : FROM base AS frozen-images
 ---> e0dfc2949ed1
Step 18/94 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 53094ab52103
Step 19/94 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> b34d5b59be60
Step 20/94 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> 30540c8388ee
Step 21/94 : FROM base AS runtime-dev
 ---> e0dfc2949ed1
Step 22/94 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> ed8e6a8922a3
Step 23/94 : FROM base AS tomlv
 ---> e0dfc2949ed1
Step 24/94 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> f7337d9a98e4
Step 25/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> d08a2a1391b6
Step 26/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 36aa18980e37
Step 27/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 57d40339dc78
Step 28/94 : FROM base AS vndr
 ---> e0dfc2949ed1
Step 29/94 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> a33f7d1a077e
Step 30/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 7594a7146be4
Step 31/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 54853626a401
Step 32/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> e366d4b35803
Step 33/94 : FROM base AS containerd
 ---> e0dfc2949ed1
Step 34/94 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> 0fdcaaa49c45
Step 35/94 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> ce92ac4aca17
Step 36/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 4579f5ea25a1
Step 37/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 7756ffd060e6
Step 38/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 37422f7bb764
Step 39/94 : FROM base AS proxy
 ---> e0dfc2949ed1
Step 40/94 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> 5c1ea678e048
Step 41/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 4bf70146e4c0
Step 42/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 0c66c2771aec
Step 43/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 6faeece0371d
Step 44/94 : FROM base AS gometalinter
 ---> e0dfc2949ed1
Step 45/94 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> c07b3e8585e4
Step 46/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 63772207a280
Step 47/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> a8295759bae7
Step 48/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 3b9795527856
Step 49/94 : FROM base AS dockercli
 ---> e0dfc2949ed1
Step 50/94 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> 38699ef6a338
Step 51/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 90e257bcdf36
Step 52/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 166185db0d44
Step 53/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 732ef41b9906
Step 54/94 : FROM runtime-dev AS runc
 ---> ed8e6a8922a3
Step 55/94 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> 334d708f0170
Step 56/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 7c69c57b9283
Step 57/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 4402c8692ecf
Step 58/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> c1c2128ff924
Step 59/94 : FROM base AS tini
 ---> e0dfc2949ed1
Step 60/94 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> 3e372e9531c9
Step 61/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 76175c606ce4
Step 62/94 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> ca87521f7a58
Step 63/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> d58b0d5bc215
Step 64/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> eb56d078af3f
Step 65/94 : FROM runtime-dev AS dev
 ---> ed8e6a8922a3
Step 66/94 : RUN groupadd -r docker
 ---> Using cache
 ---> 6892c6bb4269
Step 67/94 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> 706559ddccc1
Step 68/94 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> f648ee6a89e7
Step 69/94 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> 8a48d721edc9
Step 70/94 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 0dcc220d6db5
Step 71/94 : RUN ldconfig
 ---> Using cache
 ---> b0794881b038
Step 72/94 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	--no-install-recommends
 ---> Using cache
 ---> 73329b54c4b6
Step 73/94 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> 86581c6fe7df
Step 74/94 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> a77452da4f29
Step 75/94 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> d13f6796faa7
Step 76/94 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> dd081c9c58e1
Step 77/94 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> 1c7928a716bf
Step 78/94 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> c6f0c70ed02d
Step 79/94 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> ad9509d5511d
Step 80/94 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> 5ae0f9b6e48a
Step 81/94 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> d84b2ebc1134
Step 82/94 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 7e5f3eb42a3f
Step 83/94 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> f7867d11d4d6
Step 84/94 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> 271a5f292d4a
Step 85/94 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> 8ddcbdc446ee
Step 86/94 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 1a08ac33c261
Step 87/94 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> 6d4c3dc9de01
Step 88/94 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> a46873759d93
Step 89/94 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> 2021b496691a
Step 90/94 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> 63ea62b1285b
Step 91/94 : VOLUME /var/lib/docker
 ---> Using cache
 ---> b5bf6bd27599
Step 92/94 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> c76d1bce113c
Step 93/94 : FROM dev AS final
 ---> c76d1bce113c
Step 94/94 : COPY . /go/src/github.com/docker/docker
 ---> 191021cd9d0b
Successfully built 191021cd9d0b
Successfully tagged docker:dbd1361
Congratulations!  All commits are properly signed with the DCO!
Congratulations!  "./pkg/..." is safely isolated from internal code.
No api/types/ or api/swagger.yaml changes in diff.
Congratulations!  No testing.T found.
Congratulations!  All toml source files changed here have valid syntax.
Congratulations!  Changelog CHANGELOG.md is well-formed.
Congratulations!  Changelog CHANGELOG.md dates are in descending order.
The following new tests were added to integration-cli:

+func (s *DockerSwarmSuite) TestSwarmNetworkPlugin(c *check.C) {

integration-cli is deprecated. Please add an API integration test to
./integration/COMPONENT/. See ./TESTING.md for more details.

Build step 'Execute shell' marked build as failure
Set build name.
New build name is '#38432'
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins3395972892330804042.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr52335
Error: No such container: docker-pr52335
+ true
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins2149132732935211439.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ find bundles -name+ xargs tar -czf bundles.tar.gz
 *.log -o -name *.prof -o -name integration.test
tar: Cowardly refusing to create an empty archive
Try 'tar --help' or 'tar --usage' for more information.
+ true
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: FAILURE
