Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2-stable (i-05464d2d3aa300090) (x86_64 ec2 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2-stable amd64 docker us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision f76d6a078d881f410c00e8d900dcdfc2e026c841 (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f f76d6a078d881f410c00e8d900dcdfc2e026c841
Commit message: "Merge pull request #38370 from farnasirim/36413-bind-dir-skip-copy"
 > git rev-list --no-walk f76d6a078d881f410c00e8d900dcdfc2e026c841 # timeout=10
Set build name.
New build name is '#38463'
[Docker-PRs] $ /bin/bash /tmp/jenkins3585266431571291025.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/38463/head -> origin/pr/38463
Updating f76d6a0..b651e32
Fast-forward
 .gitignore | 1 +
 1 file changed, 1 insertion(+)
Sending build context to Docker daemon  45.09MB
Step 1/94 : FROM golang:1.11.4 AS base
 ---> 343df9d12b7b
Step 2/94 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> 46116e5c6a52
Step 3/94 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> 95a4248a6c25
Step 4/94 : FROM base AS criu
 ---> 95a4248a6c25
Step 5/94 : ENV CRIU_VERSION 3.6
 ---> Using cache
 ---> 7a929e9a18b9
Step 6/94 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> d9d34b5c9711
Step 7/94 : FROM base AS registry
 ---> 95a4248a6c25
Step 8/94 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> 88fd0be41c67
Step 9/94 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> 387f2c077937
Step 10/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 0ad94e2760d6
Step 11/94 : FROM base AS docker-py
 ---> 95a4248a6c25
Step 12/94 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> 7e46b14b144c
Step 13/94 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 1778a59bdaa1
Step 14/94 : FROM base AS swagger
 ---> 95a4248a6c25
Step 15/94 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> 9ea2b4e1f5d6
Step 16/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 86001349f62f
Step 17/94 : FROM base AS frozen-images
 ---> 95a4248a6c25
Step 18/94 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 35414c96512c
Step 19/94 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> f70279121678
Step 20/94 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> 8332fd816723
Step 21/94 : FROM base AS runtime-dev
 ---> 95a4248a6c25
Step 22/94 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> ebb15eaac4a1
Step 23/94 : FROM base AS tomlv
 ---> 95a4248a6c25
Step 24/94 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> d0e91da1390a
Step 25/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 06e4620659b6
Step 26/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 778338a6c497
Step 27/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 4740d5b81abe
Step 28/94 : FROM base AS vndr
 ---> 95a4248a6c25
Step 29/94 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> ac6536abda5c
Step 30/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 3c586b029022
Step 31/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 704f3201fb1f
Step 32/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 679599837146
Step 33/94 : FROM base AS containerd
 ---> 95a4248a6c25
Step 34/94 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> 395fd25eff5c
Step 35/94 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> ad5410deda7c
Step 36/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> e9022abd2c8d
Step 37/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 929512fe74ab
Step 38/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 7f6a24441b99
Step 39/94 : FROM base AS proxy
 ---> 95a4248a6c25
Step 40/94 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> e2aeef67edd8
Step 41/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 3d86241e3968
Step 42/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> e0e5af0f98af
Step 43/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 04f66ee28da7
Step 44/94 : FROM base AS gometalinter
 ---> 95a4248a6c25
Step 45/94 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 1047d8c0c967
Step 46/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> b66b33620447
Step 47/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 87da635291cd
Step 48/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 4813041ae58d
Step 49/94 : FROM base AS dockercli
 ---> 95a4248a6c25
Step 50/94 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> c42ab307a7c3
Step 51/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> ad69bcfe6350
Step 52/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 0478691d19d5
Step 53/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 37809eda2248
Step 54/94 : FROM runtime-dev AS runc
 ---> ebb15eaac4a1
Step 55/94 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> 400abd7a3f49
Step 56/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 6a8671744ff4
Step 57/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 37e3d9d0cf3f
Step 58/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> dce4bb5e33f5
Step 59/94 : FROM base AS tini
 ---> 95a4248a6c25
Step 60/94 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> 420a3c2eb6bb
Step 61/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> ee4e66978d55
Step 62/94 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> 48a4b4acbad2
Step 63/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> e023e823df8d
Step 64/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> eb0e15b601d3
Step 65/94 : FROM runtime-dev AS dev
 ---> ebb15eaac4a1
Step 66/94 : RUN groupadd -r docker
 ---> Using cache
 ---> 1cce33f21747
Step 67/94 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> 028c58a227bb
Step 68/94 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> c81f0cf56cc9
Step 69/94 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> aaaa8efb7949
Step 70/94 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 1de55fb77b28
Step 71/94 : RUN ldconfig
 ---> Using cache
 ---> b9c403f52005
Step 72/94 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	--no-install-recommends
 ---> Using cache
 ---> f8893656aaea
Step 73/94 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> 0a9b7d9ec454
Step 74/94 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> 75d48d6a3ea8
Step 75/94 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> 33d7b590eb47
Step 76/94 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> 0d1617b4da95
Step 77/94 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> 2af7ce48aae6
Step 78/94 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> 7a5d0d5ef793
Step 79/94 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> 469857b8d953
Step 80/94 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> cc9014edb110
Step 81/94 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> 5c3b0708ec7b
Step 82/94 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 60ee54446dba
Step 83/94 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> 56e56de158f8
Step 84/94 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> 83d0caee6eda
Step 85/94 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> c56e677a0b72
Step 86/94 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 5e8edc9cebf1
Step 87/94 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> 36573c833d0e
Step 88/94 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> 7077b7c0cdde
Step 89/94 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> 2fa327c26204
Step 90/94 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> 8b1c187b2ca8
Step 91/94 : VOLUME /var/lib/docker
 ---> Using cache
 ---> af68995e3759
Step 92/94 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> c1d4dfc67a3c
Step 93/94 : FROM dev AS final
 ---> c1d4dfc67a3c
Step 94/94 : COPY . /go/src/github.com/docker/docker
 ---> 2fdd3505c6f8
Successfully built 2fdd3505c6f8
Successfully tagged docker:b651e32
These commits do not have a proper 'Signed-off-by:' marker:
 - b651e3202231b433c63cba256c4dc167c2c06447

Please amend each commit to include a properly formatted DCO marker.

Visit the following URL for information about the Docker DCO:
 https://github.com/docker/docker/blob/master/CONTRIBUTING.md#sign-your-work

Build step 'Execute shell' marked build as failure
Set build name.
New build name is '#38463'
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins7281988379664579948.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr52322
Error: No such container: docker-pr52322
+ true
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins2625121955291591276.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ find bundles -name *.log -o -name *.prof -o -name integration.test
+ xargs tar -czf bundles.tar.gz
tar: Cowardly refusing to create an empty archive
Try 'tar --help' or 'tar --usage' for more information.
+ true
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: FAILURE
