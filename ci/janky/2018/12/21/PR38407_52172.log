Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2-stable (i-01a974f5a0fcc2232) (x86_64 ec2 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2-stable amd64 docker us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision 2cb26cfe9cbf8a64c5046c74d65f4528b22e67f4 (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 2cb26cfe9cbf8a64c5046c74d65f4528b22e67f4
Commit message: "Merge pull request #38301 from cyphar/waitgroup-limits"
 > git rev-list --no-walk 2cb26cfe9cbf8a64c5046c74d65f4528b22e67f4 # timeout=10
Set build name.
New build name is '#38407'
[Docker-PRs] $ /bin/bash /tmp/jenkins7234384023832063687.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/38407/head -> origin/pr/38407
Updating 2cb26cf..687cbfa
Fast-forward
 daemon/logger/awslogs/cloudwatchlogs.go      | 153 +++++++++++++++++++--------
 daemon/logger/awslogs/cloudwatchlogs_test.go | 126 ++++++++++++++++++++--
 2 files changed, 231 insertions(+), 48 deletions(-)
Sending build context to Docker daemon  45.09MB
Step 1/93 : FROM golang:1.11.4 AS base
 ---> 2422e4d43e15
Step 2/93 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> b8009ae5237d
Step 3/93 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> f81e333b303c
Step 4/93 : FROM base AS criu
 ---> f81e333b303c
Step 5/93 : ENV CRIU_VERSION 3.6
 ---> Using cache
 ---> b4f687ddb31e
Step 6/93 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> 532c06bca6f8
Step 7/93 : FROM base AS registry
 ---> f81e333b303c
Step 8/93 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> 8de85ea68a7b
Step 9/93 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> 5f4c62d0ebb5
Step 10/93 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 598202e7443f
Step 11/93 : FROM base AS docker-py
 ---> f81e333b303c
Step 12/93 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> 8d95c4dcbb28
Step 13/93 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> e900ee40e806
Step 14/93 : FROM base AS swagger
 ---> f81e333b303c
Step 15/93 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> d54a3a365772
Step 16/93 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> c4ce86b4d68b
Step 17/93 : FROM base AS frozen-images
 ---> f81e333b303c
Step 18/93 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 50c554621042
Step 19/93 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> 5e639a96b014
Step 20/93 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> 3ca741d8f480
Step 21/93 : FROM base AS runtime-dev
 ---> f81e333b303c
Step 22/93 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> 0a1327e3aab9
Step 23/93 : FROM base AS tomlv
 ---> f81e333b303c
Step 24/93 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> c6f01f378180
Step 25/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> f9768e7bf4fd
Step 26/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> e1c0a5712008
Step 27/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> d8efd1560124
Step 28/93 : FROM base AS vndr
 ---> f81e333b303c
Step 29/93 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> 96d7e93f9341
Step 30/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 03726dcdd751
Step 31/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> a8898f1dd0ae
Step 32/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> e77dba69aa76
Step 33/93 : FROM base AS containerd
 ---> f81e333b303c
Step 34/93 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> d9be898da8aa
Step 35/93 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> c168f67d8f5b
Step 36/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 2a820ecbb568
Step 37/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 9d0db0c907da
Step 38/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 9e351d398557
Step 39/93 : FROM base AS proxy
 ---> f81e333b303c
Step 40/93 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> 0010c6598dc0
Step 41/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> ad4ebe702e6e
Step 42/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> b73bd275f531
Step 43/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> cf0cc65029be
Step 44/93 : FROM base AS gometalinter
 ---> f81e333b303c
Step 45/93 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 67cb98e23257
Step 46/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 060852352499
Step 47/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 9b7cd10669b1
Step 48/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> a96ca48c33d7
Step 49/93 : FROM base AS dockercli
 ---> f81e333b303c
Step 50/93 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> f8e132f4d3c2
Step 51/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 9af5fc5f710c
Step 52/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 48c671ae9345
Step 53/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 7ddf9704808a
Step 54/93 : FROM runtime-dev AS runc
 ---> 0a1327e3aab9
Step 55/93 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> 4239d2995ca5
Step 56/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 9ce29de1b6a5
Step 57/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> a1560cc57d48
Step 58/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 98342617c361
Step 59/93 : FROM base AS tini
 ---> f81e333b303c
Step 60/93 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> f6fd2a307dd5
Step 61/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> a51123495257
Step 62/93 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> f96901ad3500
Step 63/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 585844747197
Step 64/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 13dde81bc4c0
Step 65/93 : FROM runtime-dev AS dev
 ---> 0a1327e3aab9
Step 66/93 : RUN groupadd -r docker
 ---> Using cache
 ---> 073a74a0c074
Step 67/93 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> 564531a5f0d3
Step 68/93 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> f9abada891e8
Step 69/93 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> 8e3e8022a06b
Step 70/93 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 55ce18e900c9
Step 71/93 : RUN ldconfig
 ---> Using cache
 ---> 0eff8f5f4273
Step 72/93 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	--no-install-recommends
 ---> Using cache
 ---> 68b3f4b205ea
Step 73/93 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> edc8861886a0
Step 74/93 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> bc7a3fcb3c53
Step 75/93 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> 0ee6a21fabb5
Step 76/93 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> ccf3530943b9
Step 77/93 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> 3ae98a22c4ff
Step 78/93 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> 9c91a07c4203
Step 79/93 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> a08e262bc58d
Step 80/93 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> 56d0d7c6a62e
Step 81/93 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> f5774ad3d08d
Step 82/93 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> c2cebc81484f
Step 83/93 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> 01e336128300
Step 84/93 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> 53d360519074
Step 85/93 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> c44b438b1634
Step 86/93 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 4aab0632722b
Step 87/93 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> e1a14d74c06d
Step 88/93 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> a79bc045361c
Step 89/93 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> 469a1337525a
Step 90/93 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> 12e4768fb9e4
Step 91/93 : VOLUME /var/lib/docker
 ---> Using cache
 ---> 60edfb10d8b2
Step 92/93 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> bbb0a20f533a
Step 93/93 : COPY . /go/src/github.com/docker/docker
 ---> ecc404cc71a6
Successfully built ecc404cc71a6
Successfully tagged docker:687cbfa
Congratulations!  All commits are properly signed with the DCO!
Congratulations!  "./pkg/..." is safely isolated from internal code.
No api/types/ or api/swagger.yaml changes in diff.
Congratulations!  No testing.T found.
Congratulations!  All toml source files changed here have valid syntax.
Congratulations!  Changelog CHANGELOG.md is well-formed.
Congratulations!  Changelog CHANGELOG.md dates are in descending order.
Congratulations!  No new tests added to integration-cli.
?   	github.com/docker/docker/api	[no test files]
ok  	github.com/docker/docker/api/server	0.004s	coverage: 7.9% of statements
?   	github.com/docker/docker/api/server/backend/build	[no test files]
ok  	github.com/docker/docker/api/server/httputils	0.004s	coverage: 11.1% of statements
ok  	github.com/docker/docker/api/server/middleware	0.004s	coverage: 43.4% of statements
?   	github.com/docker/docker/api/server/router	[no test files]
?   	github.com/docker/docker/api/server/router/build	[no test files]
?   	github.com/docker/docker/api/server/router/checkpoint	[no test files]
?   	github.com/docker/docker/api/server/router/container	[no test files]
?   	github.com/docker/docker/api/server/router/debug	[no test files]
?   	github.com/docker/docker/api/server/router/distribution	[no test files]
?   	github.com/docker/docker/api/server/router/image	[no test files]
?   	github.com/docker/docker/api/server/router/network	[no test files]
?   	github.com/docker/docker/api/server/router/plugin	[no test files]
?   	github.com/docker/docker/api/server/router/session	[no test files]
?   	github.com/docker/docker/api/server/router/swarm	[no test files]
?   	github.com/docker/docker/api/server/router/system	[no test files]
?   	github.com/docker/docker/api/server/router/volume	[no test files]
?   	github.com/docker/docker/api/types	[no test files]
?   	github.com/docker/docker/api/types/backend	[no test files]
?   	github.com/docker/docker/api/types/blkiodev	[no test files]
?   	github.com/docker/docker/api/types/container	[no test files]
?   	github.com/docker/docker/api/types/events	[no test files]
ok  	github.com/docker/docker/api/types/filters	0.003s	coverage: 94.2% of statements
?   	github.com/docker/docker/api/types/image	[no test files]
?   	github.com/docker/docker/api/types/mount	[no test files]
?   	github.com/docker/docker/api/types/network	[no test files]
?   	github.com/docker/docker/api/types/plugins/logdriver	[no test files]
?   	github.com/docker/docker/api/types/registry	[no test files]
ok  	github.com/docker/docker/api/types/strslice	0.002s	coverage: 90.0% of statements
?   	github.com/docker/docker/api/types/swarm	[no test files]
?   	github.com/docker/docker/api/types/swarm/runtime	[no test files]
ok  	github.com/docker/docker/api/types/time	0.002s	coverage: 100.0% of statements
ok  	github.com/docker/docker/api/types/versions	0.002s	coverage: 75.0% of statements
?   	github.com/docker/docker/api/types/versions/v1p19	[no test files]
?   	github.com/docker/docker/api/types/versions/v1p20	[no test files]
?   	github.com/docker/docker/api/types/volume	[no test files]
?   	github.com/docker/docker/builder	[no test files]
?   	github.com/docker/docker/builder/builder-next	[no test files]
?   	github.com/docker/docker/builder/builder-next/adapters/containerimage	[no test files]
?   	github.com/docker/docker/builder/builder-next/adapters/snapshot	[no test files]
?   	github.com/docker/docker/builder/builder-next/exporter	[no test files]
?   	github.com/docker/docker/builder/builder-next/imagerefchecker	[no test files]
?   	github.com/docker/docker/builder/builder-next/worker	[no test files]
ok  	github.com/docker/docker/builder/dockerfile	0.444s	coverage: 45.4% of statements
ok  	github.com/docker/docker/builder/dockerignore	0.002s	coverage: 96.8% of statements
ok  	github.com/docker/docker/builder/fscache	0.112s	coverage: 69.2% of statements
ok  	github.com/docker/docker/builder/remotecontext	0.144s	coverage: 13.7% of statements
ok  	github.com/docker/docker/builder/remotecontext/git	0.597s	coverage: 78.8% of statements
?   	github.com/docker/docker/cli	[no test files]
?   	github.com/docker/docker/cli/config	[no test files]
ok  	github.com/docker/docker/cli/debug	0.002s	coverage: 100.0% of statements
ok  	github.com/docker/docker/client	0.097s	coverage: 75.6% of statements
ok  	github.com/docker/docker/cmd/dockerd	0.043s	coverage: 31.4% of statements
ok  	github.com/docker/docker/cmd/dockerd/hack	0.002s	coverage: 72.9% of statements
ok  	github.com/docker/docker/container	0.113s	coverage: 35.6% of statements
?   	github.com/docker/docker/container/stream	[no test files]
?   	github.com/docker/docker/contrib/apparmor	[no test files]
?   	github.com/docker/docker/contrib/docker-device-tool	[no test files]
?   	github.com/docker/docker/contrib/httpserver	[no test files]
ok  	github.com/docker/docker/daemon	12.123s	coverage: 17.1% of statements
ok  	github.com/docker/docker/daemon/cluster	0.030s	coverage: 0.5% of statements
ok  	github.com/docker/docker/daemon/cluster/controllers/plugin	0.008s	coverage: 65.3% of statements
ok  	github.com/docker/docker/daemon/cluster/convert	0.006s	coverage: 28.0% of statements
?   	github.com/docker/docker/daemon/cluster/executor	[no test files]
ok  	github.com/docker/docker/daemon/cluster/executor/container	3.432s	coverage: 12.6% of statements
?   	github.com/docker/docker/daemon/cluster/provider	[no test files]
ok  	github.com/docker/docker/daemon/config	0.028s	coverage: 84.8% of statements
ok  	github.com/docker/docker/daemon/discovery	0.004s	coverage: 30.4% of statements
ok  	github.com/docker/docker/daemon/events	0.057s	coverage: 50.0% of statements
?   	github.com/docker/docker/daemon/events/testutils	[no test files]
?   	github.com/docker/docker/daemon/exec	[no test files]
ok  	github.com/docker/docker/daemon/graphdriver	0.004s	coverage: 2.2% of statements
ok  	github.com/docker/docker/daemon/graphdriver/aufs	5.226s	coverage: 73.6% of statements
ok  	github.com/docker/docker/daemon/graphdriver/btrfs	0.005s	coverage: 2.9% of statements
ok  	github.com/docker/docker/daemon/graphdriver/copy	0.177s	coverage: 57.0% of statements
ok  	github.com/docker/docker/daemon/graphdriver/devmapper	2.151s	coverage: 45.9% of statements
?   	github.com/docker/docker/daemon/graphdriver/graphtest	[no test files]
ok  	github.com/docker/docker/daemon/graphdriver/overlay	0.742s	coverage: 50.8% of statements
ok  	github.com/docker/docker/daemon/graphdriver/overlay2	2.150s	coverage: 56.8% of statements
?   	github.com/docker/docker/daemon/graphdriver/overlayutils	[no test files]
ok  	github.com/docker/docker/daemon/graphdriver/quota	0.270s	coverage: 75.2% of statements
?   	github.com/docker/docker/daemon/graphdriver/register	[no test files]
ok  	github.com/docker/docker/daemon/graphdriver/vfs	0.005s	coverage: 70.5% of statements
ok  	github.com/docker/docker/daemon/graphdriver/zfs	0.004s	coverage: 3.0% of statements
ok  	github.com/docker/docker/daemon/images	0.010s	coverage: 4.9% of statements
?   	github.com/docker/docker/daemon/initlayer	[no test files]
ok  	github.com/docker/docker/daemon/links	0.002s	coverage: 93.0% of statements
?   	github.com/docker/docker/daemon/listeners	[no test files]
ok  	github.com/docker/docker/daemon/logger	0.214s	coverage: 43.7% of statements
--- FAIL: TestNewStreamConfig (0.01s)
    --- FAIL: TestNewStreamConfig/flush_interval_at_15 (0.00s)
        cloudwatchlogs_test.go:103: assertion failed: err is nil: Expected an error
    --- FAIL: TestNewStreamConfig/max_buffered_events_at_1024 (0.00s)
        cloudwatchlogs_test.go:103: assertion failed: err is nil: Expected an error
time="2018-12-21T20:52:06Z" level=info msg="Trying to get region from EC2 Metadata"
time="2018-12-21T20:52:06Z" level=info msg="Log stream already exists" errorCode=ResourceAlreadyExistsException logGroupName= logStreamName= message= origError="<nil>"
time="2018-12-21T20:52:06Z" level=error msg=Error
time="2018-12-21T20:52:06Z" level=error msg="Failed to put log events" errorCode=InvalidSequenceTokenException logGroupName=groupName logStreamName=streamName message="use token token" origError="<nil>"
time="2018-12-21T20:52:06Z" level=error msg="Failed to put log events" errorCode=DataAlreadyAcceptedException logGroupName=groupName logStreamName=streamName message="use token token" origError="<nil>"
time="2018-12-21T20:52:06Z" level=info msg="Data already accepted, ignoring error" errorCode=DataAlreadyAcceptedException logGroupName=groupName logStreamName=streamName message="use token token"
FAIL
coverage: 78.6% of statements
FAIL	github.com/docker/docker/daemon/logger/awslogs	0.121s
Build step 'Execute shell' marked build as failure
Set build name.
New build name is '#38407'
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins1442676744844779222.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr52172
Error: No such container: docker-pr52172
+ true
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins8420189437042770041.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ xargs tar -czf bundles.tar.gz
+ find bundles -name *.log -o -name *.prof -o -name integration.test
tar: Cowardly refusing to create an empty archive
Try 'tar --help' or 'tar --usage' for more information.
+ true
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: FAILURE
