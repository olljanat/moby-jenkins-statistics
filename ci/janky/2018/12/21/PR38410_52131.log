Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2-stable (i-0fc46a29decf41e57) (x86_64 ec2 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2-stable amd64 docker us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision c77afb700dd65276d932bdb82646e3c458dfdad8 (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f c77afb700dd65276d932bdb82646e3c458dfdad8
Commit message: "Merge pull request #38402 from thaJeztah/bump_golang_1.11.4"
 > git rev-list --no-walk c77afb700dd65276d932bdb82646e3c458dfdad8 # timeout=10
Set build name.
New build name is '#38410'
[Docker-PRs] $ /bin/bash /tmp/jenkins510368467694421353.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/38410/head -> origin/pr/38410
Merge made by the 'recursive' strategy.
 Dockerfile.windows  | 109 +++++++++++-----------------------------------------
 hack/ci/windows.ps1 |  20 +++++-----
 2 files changed, 34 insertions(+), 95 deletions(-)
Sending build context to Docker daemon  45.08MB
Step 1/93 : FROM golang:1.11.4 AS base
 ---> 2422e4d43e15
Step 2/93 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> 969fcb1f18e6
Step 3/93 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> 97a5150afbef
Step 4/93 : FROM base AS criu
 ---> 97a5150afbef
Step 5/93 : ENV CRIU_VERSION 3.6
 ---> Using cache
 ---> ee2e81d22846
Step 6/93 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> 2f8b0c2d464c
Step 7/93 : FROM base AS registry
 ---> 97a5150afbef
Step 8/93 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> 1483a337f35c
Step 9/93 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> e13c1d41081d
Step 10/93 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> b3f118cc8cde
Step 11/93 : FROM base AS docker-py
 ---> 97a5150afbef
Step 12/93 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> 1d72197e1f92
Step 13/93 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 898520a3d2f3
Step 14/93 : FROM base AS swagger
 ---> 97a5150afbef
Step 15/93 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> 86eff023c0a4
Step 16/93 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> d8e818fa851d
Step 17/93 : FROM base AS frozen-images
 ---> 97a5150afbef
Step 18/93 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 9a74317bc3fe
Step 19/93 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> 68d4bb9c7ba4
Step 20/93 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> 5b099399f799
Step 21/93 : FROM base AS runtime-dev
 ---> 97a5150afbef
Step 22/93 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> e7cd7fda237b
Step 23/93 : FROM base AS tomlv
 ---> 97a5150afbef
Step 24/93 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> 8352447a5908
Step 25/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 47c6008286ae
Step 26/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> d8e127246c77
Step 27/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> d6328cf1411f
Step 28/93 : FROM base AS vndr
 ---> 97a5150afbef
Step 29/93 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> c6f962c594b2
Step 30/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 75d4aaf3164d
Step 31/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> c172c5e93aef
Step 32/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 52541e259e14
Step 33/93 : FROM base AS containerd
 ---> 97a5150afbef
Step 34/93 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> 93af50029679
Step 35/93 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> 98854e71d672
Step 36/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 9eca4697dab4
Step 37/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 883a5fad28cb
Step 38/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 595f085db11a
Step 39/93 : FROM base AS proxy
 ---> 97a5150afbef
Step 40/93 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> 94841b2efb5a
Step 41/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 29ef6f6aead6
Step 42/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 198e1501ee73
Step 43/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 0d56f6aa6a8f
Step 44/93 : FROM base AS gometalinter
 ---> 97a5150afbef
Step 45/93 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 7281027084bb
Step 46/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> e445dcc37ed4
Step 47/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> f3af0f4c857b
Step 48/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 712faf36b0a7
Step 49/93 : FROM base AS dockercli
 ---> 97a5150afbef
Step 50/93 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> 6d60a9ade483
Step 51/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> d58941097871
Step 52/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 122785114313
Step 53/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 20c652fa4616
Step 54/93 : FROM runtime-dev AS runc
 ---> e7cd7fda237b
Step 55/93 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> a1d1a5bc71bb
Step 56/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> fc32a5937719
Step 57/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> c2610a0bb266
Step 58/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 7d4d2986eba2
Step 59/93 : FROM base AS tini
 ---> 97a5150afbef
Step 60/93 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> 874307226943
Step 61/93 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 2112a22e7c3f
Step 62/93 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> a73032eac8d4
Step 63/93 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 7bb329ba9ed6
Step 64/93 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> f192f730ac4d
Step 65/93 : FROM runtime-dev AS dev
 ---> e7cd7fda237b
Step 66/93 : RUN groupadd -r docker
 ---> Using cache
 ---> 9d90c56f8d27
Step 67/93 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> 4ca0a69c1312
Step 68/93 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> 3d78c88c7b1a
Step 69/93 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> 5feecd00e16e
Step 70/93 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 2c4e9310a0b6
Step 71/93 : RUN ldconfig
 ---> Using cache
 ---> a002ccf28ace
Step 72/93 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	--no-install-recommends
 ---> Using cache
 ---> 26e0d39061a3
Step 73/93 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> 2fff2dd260fb
Step 74/93 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> e3264c50c020
Step 75/93 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> ff391ff9631a
Step 76/93 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> 0ab51c2008b3
Step 77/93 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> a2ad85dc32b8
Step 78/93 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> 772a89b9e440
Step 79/93 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> ffe6ce5ace1e
Step 80/93 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> 17bc744f1029
Step 81/93 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> 4ba34693cba3
Step 82/93 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 1fa23d6d77f0
Step 83/93 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> 125cd6873950
Step 84/93 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> 74cbbffa0716
Step 85/93 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> 1b861549fe37
Step 86/93 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 8d9a9c318d00
Step 87/93 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> 28d44d3ca90f
Step 88/93 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> 5bc286e645a1
Step 89/93 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> f359cde034bc
Step 90/93 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> 1eea88543ff7
Step 91/93 : VOLUME /var/lib/docker
 ---> Using cache
 ---> a00df77a22b0
Step 92/93 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> ac70c45b4003
Step 93/93 : COPY . /go/src/github.com/docker/docker
 ---> ec2d681680e9
Successfully built ec2d681680e9
Successfully tagged docker:2caa5bd
Congratulations!  All commits are properly signed with the DCO!
Congratulations!  "./pkg/..." is safely isolated from internal code.
No api/types/ or api/swagger.yaml changes in diff.
Congratulations!  No testing.T found.
Congratulations!  All toml source files changed here have valid syntax.
Congratulations!  Changelog CHANGELOG.md is well-formed.
Congratulations!  Changelog CHANGELOG.md dates are in descending order.
Congratulations!  No new tests added to integration-cli.
?   	github.com/docker/docker/api	[no test files]
ok  	github.com/docker/docker/api/server	0.004s	coverage: 7.9% of statements
Set build name.
/tmp/jenkins510368467694421353.sh: line 26:   382 Terminated              docker run --rm -t --privileged -v "$WORKSPACE/bundles:/go/src/github.com/docker/docker/bundles" -v "$WORKSPACE/.git:/go/src/github.com/docker/docker/.git" --name docker-pr$BUILD_NUMBER -e DOCKER_GITCOMMIT=${GITCOMMIT} -e DOCKER_GRAPHDRIVER=vfs -e DOCKER_EXECDRIVER=native -e CODECOV_TOKEN -e GIT_SHA1 docker:$GITCOMMIT hack/ci/janky
New build name is '#38410'
Build was aborted
Aborted by Gordon
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins6758390164549527920.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr52131
docker-pr52131
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins8505624321752398172.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ xargs tar -czf bundles.tar.gz
+ find bundles -name *.log -o -name *.prof -o -name integration.test
tar: Cowardly refusing to create an empty archive
Try 'tar --help' or 'tar --usage' for more information.
+ true
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: ABORTED
