Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2 (i-0ed12c2f3ff2a2741) (x86_64 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2 ubuntu-1604-overlay2-stable amd64) in workspace /home/ubuntu/workspace/Docker-PRs
No credentials specified
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision b1239f0a9f5acb08436d7c97092b3e0f5e75fcaa (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f b1239f0a9f5acb08436d7c97092b3e0f5e75fcaa
Commit message: "Merge pull request #39277 from olljanat/fix-code-on-master"
 > git rev-list --no-walk b1239f0a9f5acb08436d7c97092b3e0f5e75fcaa # timeout=10
Set build name.
New build name is '#39252'
[Docker-PRs] $ /bin/bash /tmp/jenkins5076432410990249614.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/39252/head -> origin/pr/39252
Merge made by the 'recursive' strategy.
 daemon/archive.go | 91 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 daemon/pause.go   |  5 ++-
 daemon/unpause.go |  4 +++
 3 files changed, 99 insertions(+), 1 deletion(-)
Sending build context to Docker daemon     48MB
Step 1/112 : ARG CROSS="false"
Step 2/112 : FROM golang:1.12.5 AS base
 ---> 7ced090ee82e
Step 3/112 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> dfc1194e1597
Step 4/112 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> 421bc4b5b666
Step 5/112 : FROM base AS criu
 ---> 421bc4b5b666
Step 6/112 : ENV CRIU_VERSION 3.11
 ---> Using cache
 ---> 667b12096002
Step 7/112 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> cfe3868d84c3
Step 8/112 : FROM base AS registry
 ---> 421bc4b5b666
Step 9/112 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> 4d3643606370
Step 10/112 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> e939d76a5567
Step 11/112 : FROM base AS docker-py
 ---> 421bc4b5b666
Step 12/112 : ENV DOCKER_PY_COMMIT ac922192959870774ad8428344d9faa0555f7ba6
 ---> Using cache
 ---> 7c6d16ad86ad
Step 13/112 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 8da2b7218a21
Step 14/112 : FROM base AS swagger
 ---> 421bc4b5b666
Step 15/112 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> 691cb0b7979d
Step 16/112 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 5bb6d450fcc6
Step 17/112 : FROM base AS frozen-images
 ---> 421bc4b5b666
Step 18/112 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 5854644a7893
Step 19/112 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> a56a6cd53a97
Step 20/112 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> eca4dc36bdd4
Step 21/112 : FROM base AS cross-false
 ---> 421bc4b5b666
Step 22/112 : FROM base AS cross-true
 ---> 421bc4b5b666
Step 23/112 : RUN dpkg --add-architecture armhf
 ---> Using cache
 ---> 8745ce8f14b4
Step 24/112 : RUN dpkg --add-architecture arm64
 ---> Using cache
 ---> a58b57d8dc26
Step 25/112 : RUN dpkg --add-architecture armel
 ---> Using cache
 ---> e4f5b1ba1245
Step 26/112 : RUN if [ "$(go env GOHOSTARCH)" = "amd64" ]; then 	apt-get update 	&& apt-get install -y --no-install-recommends 		crossbuild-essential-armhf 		crossbuild-essential-arm64 		crossbuild-essential-armel; 	fi
 ---> Using cache
 ---> 29cccf26122c
Step 27/112 : FROM cross-${CROSS} as dev-base
 ---> 421bc4b5b666
Step 28/112 : FROM dev-base AS runtime-dev-cross-false
 ---> 421bc4b5b666
Step 29/112 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> 2bd21862c7d2
Step 30/112 : FROM cross-true AS runtime-dev-cross-true
 ---> 29cccf26122c
Step 31/112 : RUN if [ "$(go env GOHOSTARCH)" = "amd64" ]; then 	apt-get update 	&& apt-get install -y 		libseccomp-dev:armhf 		libseccomp-dev:arm64 		libseccomp-dev:armel 		libapparmor-dev:armhf 		libapparmor-dev:arm64 		libapparmor-dev:armel 		libapparmor-dev 		libseccomp-dev; 	fi
 ---> Using cache
 ---> d0a235bb9fec
Step 32/112 : FROM runtime-dev-cross-${CROSS} AS runtime-dev
 ---> 2bd21862c7d2
Step 33/112 : FROM base AS tomlv
 ---> 421bc4b5b666
Step 34/112 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> 24f6110cced1
Step 35/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 5b8af0ca9f70
Step 36/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> aff54916bb61
Step 37/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 6d6778cc0f3c
Step 38/112 : FROM base AS vndr
 ---> 421bc4b5b666
Step 39/112 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> f8c9cffaba5f
Step 40/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> c85977c724ca
Step 41/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> b66d93f18057
Step 42/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 0f4fbc7209e2
Step 43/112 : FROM dev-base AS containerd
 ---> 421bc4b5b666
Step 44/112 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> 533d98f3bc85
Step 45/112 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> 5f43d78b36af
Step 46/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 63e4ef12419f
Step 47/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> c8a1ea22dbb6
Step 48/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 4679afc9553b
Step 49/112 : FROM dev-base AS proxy
 ---> 421bc4b5b666
Step 50/112 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> ea8675719fb3
Step 51/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 5575eecc6914
Step 52/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> b29e453b424e
Step 53/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> b9f1f3115d50
Step 54/112 : FROM base AS gometalinter
 ---> 421bc4b5b666
Step 55/112 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 5b676b8089c3
Step 56/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 5c470b694442
Step 57/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> aaad27908a6c
Step 58/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 2ecfa9e7dcf8
Step 59/112 : FROM dev-base AS dockercli
 ---> 421bc4b5b666
Step 60/112 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> bf3637082731
Step 61/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 3bf97f03bd88
Step 62/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 5b29485e9bdf
Step 63/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 85f65e14eb09
Step 64/112 : FROM runtime-dev AS runc
 ---> 2bd21862c7d2
Step 65/112 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> a0a81362071b
Step 66/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 1a7fa07c2e65
Step 67/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 17e5ec5dd572
Step 68/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 89dc66025f1f
Step 69/112 : FROM dev-base AS tini
 ---> 421bc4b5b666
Step 70/112 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> 9b4c8410d012
Step 71/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 3e2b52896114
Step 72/112 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> 8cdd790c4333
Step 73/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> fb97b3702e01
Step 74/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 07c5eeb56db7
Step 75/112 : FROM dev-base AS rootlesskit
 ---> 421bc4b5b666
Step 76/112 : ENV INSTALL_BINARY_NAME=rootlesskit
 ---> Using cache
 ---> 445e17aa593e
Step 77/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> d9950ffc8813
Step 78/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 8c18625c9f20
Step 79/112 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 8f84d9d462bb
Step 80/112 : COPY ./contrib/dockerd-rootless.sh /build
 ---> Using cache
 ---> 3dca398bdf38
Step 81/112 : FROM runtime-dev AS dev
 ---> 2bd21862c7d2
Step 82/112 : RUN groupadd -r docker
 ---> Using cache
 ---> bae99ea87789
Step 83/112 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> cbb30c50190f
Step 84/112 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> 04381d5e1b2c
Step 85/112 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> 4845c4cfe619
Step 86/112 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 1b3f08d4014f
Step 87/112 : RUN ldconfig
 ---> Using cache
 ---> 54c485629cbc
Step 88/112 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libffi-dev 	libssl-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-cffi 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	libprotobuf-c1 	libnet1 	libnl-3-200 	--no-install-recommends
 ---> Using cache
 ---> f7fa31f6d110
Step 89/112 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> d32c62da8ae9
Step 90/112 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> 127c75068ccf
Step 91/112 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> 869cb25726a7
Step 92/112 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> 731b13d72d25
Step 93/112 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> f6c2d4c0d58c
Step 94/112 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> 2e618f673f97
Step 95/112 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> 923f82cfa73d
Step 96/112 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> d3b2095eef7b
Step 97/112 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> 861456298228
Step 98/112 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> d9e999750476
Step 99/112 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> c90197cc8202
Step 100/112 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> 28660e95e4c8
Step 101/112 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> dbcf549c5c1e
Step 102/112 : RUN cd /docker-py 	&& pip install docker-pycreds==0.4.0 	&& pip install paramiko==2.4.2 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 97f559103f6a
Step 103/112 : COPY --from=rootlesskit /build/ /usr/local/bin/
 ---> Using cache
 ---> ac06686d57a8
Step 104/112 : COPY --from=djs55/vpnkit@sha256:e508a17cfacc8fd39261d5b4e397df2b953690da577e2c987a47630cd0c42f8e /vpnkit /usr/local/bin/vpnkit.x86_64
 ---> Using cache
 ---> 276816effb5f
Step 105/112 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> b0507372caf7
Step 106/112 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> a7efb7f83463
Step 107/112 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> 502f89fe2142
Step 108/112 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> c57f247ff704
Step 109/112 : VOLUME /var/lib/docker
 ---> Using cache
 ---> a225d04b3b99
Step 110/112 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> 86ba4ef252c9
Step 111/112 : FROM dev AS final
 ---> 86ba4ef252c9
Step 112/112 : COPY . /go/src/github.com/docker/docker
 ---> 239971ecc7cf
Successfully built 239971ecc7cf
Successfully tagged docker:af431b2
Congratulations!  All commits are properly signed with the DCO!
daemon/archive.go:1::warning: file is not gofmted with -s (gofmt)
daemon/archive.go:1::warning: file is not goimported (goimports)
Build step 'Execute shell' marked build as failure
Set build name.
New build name is '#39252'
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins2331529020739798091.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr54307
Error: No such container: docker-pr54307
+ true
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins4552531045619526118.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ find bundles -name *.log -o -name *.prof -o -name integration.test
+ xargs tar -czf bundles.tar.gz
tar: Cowardly refusing to create an empty archive
Try 'tar --help' or 'tar --usage' for more information.
+ true
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: FAILURE
