Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2-stable (i-096dcfcafb99247d5) (x86_64 ec2 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2-stable amd64 docker us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision 156b2abd0c29f57d83a8d496c3f572a4beb4e396 (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 156b2abd0c29f57d83a8d496c3f572a4beb4e396
Commit message: "Merge pull request #38472 from thaJeztah/remove_debugging_code"
 > git rev-list --no-walk 156b2abd0c29f57d83a8d496c3f572a4beb4e396 # timeout=10
Set build name.
New build name is '#38050'
[Docker-PRs] $ /bin/bash /tmp/jenkins7824763920822587143.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/38050/head -> origin/pr/38050
Updating 156b2ab..42bc6db
Fast-forward
 Dockerfile                                    | 14 +++++
 cli/config/configdir.go                       |  2 +
 cmd/dockerd/config.go                         | 15 ++++-
 cmd/dockerd/config_common_unix.go             | 41 ++++++++++--
 cmd/dockerd/config_unix.go                    | 11 +++-
 cmd/dockerd/config_unix_test.go               |  3 +-
 cmd/dockerd/config_windows.go                 | 22 ++++---
 cmd/dockerd/daemon.go                         | 51 ++++++++++++---
 cmd/dockerd/daemon_test.go                    | 16 +++--
 cmd/dockerd/daemon_unix.go                    | 28 ++++++++-
 cmd/dockerd/daemon_windows.go                 | 10 +--
 cmd/dockerd/docker.go                         | 25 ++++++--
 cmd/dockerd/options.go                        |  2 +
 contrib/dockerd-rootless.sh                   | 69 ++++++++++++++++++++
 daemon/config/config_unix.go                  |  6 ++
 daemon/config/config_windows.go               |  5 ++
 daemon/daemon.go                              |  1 +
 daemon/daemon_unix.go                         |  3 -
 daemon/info.go                                |  3 +
 daemon/info_unix.go                           |  4 ++
 daemon/info_windows.go                        |  4 ++
 daemon/listeners/listeners_linux.go           |  5 ++
 daemon/oci_linux.go                           |  9 ++-
 docs/rootless.md                              | 90 +++++++++++++++++++++++++++
 hack/dockerfile/install/rootlesskit.installer | 34 ++++++++++
 hack/dockerfile/install/slirp4netns.installer | 28 +++++++++
 hack/make/.binary-setup                       |  3 +
 hack/make/binary-daemon                       |  3 +-
 hack/make/install-binary                      |  3 +
 opts/hosts.go                                 | 15 ++++-
 opts/hosts_test.go                            |  4 +-
 pkg/homedir/homedir_linux.go                  | 88 ++++++++++++++++++++++++++
 pkg/homedir/homedir_others.go                 | 20 ++++++
 pkg/sysinfo/sysinfo_linux.go                  |  4 +-
 rootless/rootless.go                          | 26 ++++++++
 rootless/specconv/specconv_linux.go           | 38 +++++++++++
 36 files changed, 650 insertions(+), 55 deletions(-)
 create mode 100755 contrib/dockerd-rootless.sh
 create mode 100644 docs/rootless.md
 create mode 100755 hack/dockerfile/install/rootlesskit.installer
 create mode 100755 hack/dockerfile/install/slirp4netns.installer
 create mode 100644 rootless/rootless.go
 create mode 100644 rootless/specconv/specconv_linux.go
Sending build context to Docker daemon  45.13MB
Step 1/108 : FROM golang:1.11.4 AS base
 ---> 343df9d12b7b
Step 2/108 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> 189ab9c46d14
Step 3/108 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> 5d3257ad82ed
Step 4/108 : FROM base AS criu
 ---> 5d3257ad82ed
Step 5/108 : ENV CRIU_VERSION 3.6
 ---> Using cache
 ---> 0154d547dfe4
Step 6/108 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> 4a4543548130
Step 7/108 : FROM base AS registry
 ---> 5d3257ad82ed
Step 8/108 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> 13641e6c77af
Step 9/108 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> 0ec2c5bc3e99
Step 10/108 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 8a6a05407239
Step 11/108 : FROM base AS docker-py
 ---> 5d3257ad82ed
Step 12/108 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> 8f3f3d905aa7
Step 13/108 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 54128c45e22f
Step 14/108 : FROM base AS swagger
 ---> 5d3257ad82ed
Step 15/108 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> 2ba0ce8938af
Step 16/108 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 0a5c0ae30e83
Step 17/108 : FROM base AS frozen-images
 ---> 5d3257ad82ed
Step 18/108 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 1d80a777f791
Step 19/108 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> 41bd88c0deb8
Step 20/108 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> 203504006f2d
Step 21/108 : FROM base AS runtime-dev
 ---> 5d3257ad82ed
Step 22/108 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> 6a4f64f5b36d
Step 23/108 : FROM base AS tomlv
 ---> 5d3257ad82ed
Step 24/108 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> b1ea0f907796
Step 25/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> fcbef7a92642
Step 26/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> e3be58693cbf
Step 27/108 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 816a4f3535c6
Step 28/108 : FROM base AS vndr
 ---> 5d3257ad82ed
Step 29/108 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> 5e4a2f9e79be
Step 30/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 2f1d58fca2ca
Step 31/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 638949ca1170
Step 32/108 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 35ab0ee642c8
Step 33/108 : FROM base AS containerd
 ---> 5d3257ad82ed
Step 34/108 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> 754336950edc
Step 35/108 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> 9dce419ea9f6
Step 36/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 71ddaa4c79f6
Step 37/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 377b1f34a184
Step 38/108 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 15b6923e272c
Step 39/108 : FROM base AS proxy
 ---> 5d3257ad82ed
Step 40/108 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> f8907c7e2794
Step 41/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 5c6f50fdfa84
Step 42/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 9038124909f5
Step 43/108 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> d2dbeb958436
Step 44/108 : FROM base AS gometalinter
 ---> 5d3257ad82ed
Step 45/108 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 42e3c454d717
Step 46/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> e1ee7683b511
Step 47/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 908a00d672a3
Step 48/108 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> e7af86653007
Step 49/108 : FROM base AS dockercli
 ---> 5d3257ad82ed
Step 50/108 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> 0300898bc516
Step 51/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 99b532379df5
Step 52/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 3aa83ed2b62d
Step 53/108 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 0ef7bb7a7868
Step 54/108 : FROM runtime-dev AS runc
 ---> 6a4f64f5b36d
Step 55/108 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> c5667865c312
Step 56/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 91505ea1f205
Step 57/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 7eeba52a3ded
Step 58/108 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 3b1a19e68784
Step 59/108 : FROM base AS tini
 ---> 5d3257ad82ed
Step 60/108 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> 6256a4381d1b
Step 61/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> f082c0d08d78
Step 62/108 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> 0a9c32f7757c
Step 63/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 8981affa1969
Step 64/108 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 4c951e79f8a5
Step 65/108 : FROM base AS rootlesskit
 ---> 5d3257ad82ed
Step 66/108 : ENV INSTALL_BINARY_NAME=rootlesskit
 ---> Using cache
 ---> 42ea0e811817
Step 67/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> bf9ba2eac078
Step 68/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 26715bce8e69
Step 69/108 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 2bbbf2bee23d
Step 70/108 : COPY ./contrib/dockerd-rootless.sh /build
 ---> Using cache
 ---> 56753f02362e
Step 71/108 : FROM base AS slirp4netns
 ---> 5d3257ad82ed
Step 72/108 : RUN apt-get update && apt-get install -y automake autotools-dev libtool
 ---> Using cache
 ---> f122a2a16f7c
Step 73/108 : ENV INSTALL_BINARY_NAME=slirp4netns
 ---> Using cache
 ---> d806da4b8134
Step 74/108 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> ae033362e071
Step 75/108 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 61561baf3f29
Step 76/108 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 39bb3e9f1de3
Step 77/108 : FROM runtime-dev AS dev
 ---> 6a4f64f5b36d
Step 78/108 : RUN groupadd -r docker
 ---> Using cache
 ---> dd9f80e5d28c
Step 79/108 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> d45aba262729
Step 80/108 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> c6788a3ecf6d
Step 81/108 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> 1a112ebcb811
Step 82/108 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 35221bf3f993
Step 83/108 : RUN ldconfig
 ---> Using cache
 ---> 28abab4d219e
Step 84/108 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	--no-install-recommends
 ---> Using cache
 ---> 2c13e5db8e68
Step 85/108 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> d0f56c5c7832
Step 86/108 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> 0a7fe0ab8ac5
Step 87/108 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> c5030671a1df
Step 88/108 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> e872a77798aa
Step 89/108 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> 309a183c7169
Step 90/108 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> 067a31ad8645
Step 91/108 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> b9d24c5c32a7
Step 92/108 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> 0051c23ad458
Step 93/108 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> 2687ec59dce3
Step 94/108 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 849537a77d43
Step 95/108 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> a078e3ff6b16
Step 96/108 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> f28c4c784416
Step 97/108 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> 38551d64c0d1
Step 98/108 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 47de02eee97a
Step 99/108 : COPY --from=rootlesskit /build/ /usr/local/bin/
 ---> Using cache
 ---> 7515e1ad334c
Step 100/108 : COPY --from=slirp4netns /build/ /usr/local/bin/
 ---> Using cache
 ---> 94bfa8f066cd
Step 101/108 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> ee44de1871f7
Step 102/108 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> 1f7a34c213a1
Step 103/108 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> 4611a1365ca6
Step 104/108 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> 6cf1c161082d
Step 105/108 : VOLUME /var/lib/docker
 ---> Using cache
 ---> 5d8df61f4de8
Step 106/108 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> 94ab7778276b
Step 107/108 : FROM dev AS final
 ---> 94ab7778276b
Step 108/108 : COPY . /go/src/github.com/docker/docker
 ---> 9f9b098ad030
Successfully built 9f9b098ad030
Successfully tagged docker:42bc6db
Congratulations!  All commits are properly signed with the DCO!
cmd/dockerd/daemon_windows.go:20:1:warning: getDaemonDefaultConfigFile is unused (deadcode)
cmd/dockerd/daemon_unix_test.go:93:25:warning: cannot use tempFile.Path() (value of type string) as *testing.T value in argument to defaultOptions (gosimple)
Build step 'Execute shell' marked build as failure
Set build name.
New build name is '#38050'
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins5647142725283410747.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr52463
Error: No such container: docker-pr52463
+ true
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins4677574890500871001.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ find bundles -name *.log -o -name *.prof -o -name integration.test
+ xargs tar -czf bundles.tar.gz
tar: Cowardly refusing to create an empty archive
Try 'tar --help' or 'tar --usage' for more information.
+ true
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: FAILURE
