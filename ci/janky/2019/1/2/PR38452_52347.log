Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-overlay2-stable (i-089d4b45652d03e36) (x86_64 ec2 ubuntu overlay2 linux ubuntu-1604 ubuntu-1604-overlay2-stable amd64 docker us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision e0e9942dc5466884e7b2ef5c509a9dab33c4a01a (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f e0e9942dc5466884e7b2ef5c509a9dab33c4a01a
Commit message: "Merge pull request #38419 from thaJeztah/fix_nuke_everything"
 > git rev-list --no-walk e0e9942dc5466884e7b2ef5c509a9dab33c4a01a # timeout=10
Set build name.
New build name is '#38452'
[Docker-PRs] $ /bin/bash /tmp/jenkins740346145648976604.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/38452/head -> origin/pr/38452
Updating e0e9942..ca1c1ea
Fast-forward
 Dockerfile                               |   5 +-
 daemon/checkpoint.go                     |  11 +-
 integration/container/checkpoint_test.go | 182 +++++++++++++++++++++++++++++++
 3 files changed, 187 insertions(+), 11 deletions(-)
 create mode 100644 integration/container/checkpoint_test.go
Sending build context to Docker daemon   45.1MB
Step 1/94 : FROM golang:1.11.4 AS base
 ---> 343df9d12b7b
Step 2/94 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> a060561adcf1
Step 3/94 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> c1c6152aa670
Step 4/94 : FROM base AS criu
 ---> c1c6152aa670
Step 5/94 : ENV CRIU_VERSION 3.11
 ---> Using cache
 ---> 9b7d235abd2a
Step 6/94 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> 868a0e9d75c1
Step 7/94 : FROM base AS registry
 ---> c1c6152aa670
Step 8/94 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> 4a5fa92ac104
Step 9/94 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> 77a07d01454b
Step 10/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> e90d7b030967
Step 11/94 : FROM base AS docker-py
 ---> c1c6152aa670
Step 12/94 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> 752257074213
Step 13/94 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 0914a6346207
Step 14/94 : FROM base AS swagger
 ---> c1c6152aa670
Step 15/94 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> ade61df086c8
Step 16/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> a10cd02fe435
Step 17/94 : FROM base AS frozen-images
 ---> c1c6152aa670
Step 18/94 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 1447b384c4d4
Step 19/94 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> 2add6c02e761
Step 20/94 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> 41cf5b3cb4ed
Step 21/94 : FROM base AS runtime-dev
 ---> c1c6152aa670
Step 22/94 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> bd8ea5572c96
Step 23/94 : FROM base AS tomlv
 ---> c1c6152aa670
Step 24/94 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> 33778924efdc
Step 25/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 2edd0a9e7635
Step 26/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 97340dcd8e34
Step 27/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 0d1c1f18e9c9
Step 28/94 : FROM base AS vndr
 ---> c1c6152aa670
Step 29/94 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> 8c5674d9fdba
Step 30/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> e2c4601e478b
Step 31/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> e0a5b14846ff
Step 32/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 4df168c6871a
Step 33/94 : FROM base AS containerd
 ---> c1c6152aa670
Step 34/94 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> dd6e2342bf50
Step 35/94 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> 23f9af6d9302
Step 36/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 9060ad684126
Step 37/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 421a3570e615
Step 38/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 269d50c3754b
Step 39/94 : FROM base AS proxy
 ---> c1c6152aa670
Step 40/94 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> 4b67b8ed9356
Step 41/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 735093e0151f
Step 42/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 869ad7a9b439
Step 43/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 02e4b4b60b29
Step 44/94 : FROM base AS gometalinter
 ---> c1c6152aa670
Step 45/94 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 5c347343e323
Step 46/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 70de36507c81
Step 47/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 01ce0d890cd7
Step 48/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 51130b0b0c4a
Step 49/94 : FROM base AS dockercli
 ---> c1c6152aa670
Step 50/94 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> 9b5a31a82105
Step 51/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> eb963803c740
Step 52/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> b94861af5a10
Step 53/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> d5f54355639d
Step 54/94 : FROM runtime-dev AS runc
 ---> bd8ea5572c96
Step 55/94 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> 2ecb29c2196c
Step 56/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> da00a172e96d
Step 57/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 6c1039f96b3b
Step 58/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 73e2a213338e
Step 59/94 : FROM base AS tini
 ---> c1c6152aa670
Step 60/94 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> 3155776a41ae
Step 61/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> ead60cd300d7
Step 62/94 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> 8c0bab18070c
Step 63/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 53e0b4bb0d5b
Step 64/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 91f707748dca
Step 65/94 : FROM runtime-dev AS dev
 ---> bd8ea5572c96
Step 66/94 : RUN groupadd -r docker
 ---> Using cache
 ---> 725291f46ad1
Step 67/94 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> ddece1a44ae5
Step 68/94 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> 460bff8bf40b
Step 69/94 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> 88f6788f45d5
Step 70/94 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 300c89a68849
Step 71/94 : RUN ldconfig
 ---> Using cache
 ---> eb71f5126c9c
Step 72/94 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	libprotobuf-c1 	libnet1 	libnl-3-200 	--no-install-recommends
 ---> Using cache
 ---> e8dc1f3d1aae
Step 73/94 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> 17ec794e738e
Step 74/94 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> 6be52a7abea3
Step 75/94 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> 0a8cfd35019b
Step 76/94 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> 6f28de3eb432
Step 77/94 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> 640720d50e2a
Step 78/94 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> c4d85851aacb
Step 79/94 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> 966c92641ac6
Step 80/94 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> ab3d4b2b1ed6
Step 81/94 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> a321e00f56b7
Step 82/94 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 475d7e4c48ee
Step 83/94 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> c5b8bf4f1dc0
Step 84/94 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> 727a980696b7
Step 85/94 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> 8f526491e49c
Step 86/94 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 4794acb7f727
Step 87/94 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> 947613471beb
Step 88/94 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> ba2882a2455c
Step 89/94 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> d803f383efce
Step 90/94 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> f57958108c1e
Step 91/94 : VOLUME /var/lib/docker
 ---> Using cache
 ---> 484a43c03fde
Step 92/94 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> 9d7ad62f84e2
Step 93/94 : FROM dev AS final
 ---> 9d7ad62f84e2
Step 94/94 : COPY . /go/src/github.com/docker/docker
 ---> Using cache
 ---> b4596c4d63d9
Successfully built b4596c4d63d9
Successfully tagged docker:ca1c1ea
Congratulations!  All commits are properly signed with the DCO!
Congratulations!  "./pkg/..." is safely isolated from internal code.
No api/types/ or api/swagger.yaml changes in diff.
Congratulations!  No testing.T found.
Congratulations!  All toml source files changed here have valid syntax.
Congratulations!  Changelog CHANGELOG.md is well-formed.
Congratulations!  Changelog CHANGELOG.md dates are in descending order.
Congratulations!  No new tests added to integration-cli.
?   	github.com/docker/docker/api	[no test files]
ok  	github.com/docker/docker/api/server	0.004s	coverage: 7.9% of statements
?   	github.com/docker/docker/api/server/backend/build	[no test files]
ok  	github.com/docker/docker/api/server/httputils	0.004s	coverage: 11.1% of statements
ok  	github.com/docker/docker/api/server/middleware	0.004s	coverage: 43.4% of statements
?   	github.com/docker/docker/api/server/router	[no test files]
?   	github.com/docker/docker/api/server/router/build	[no test files]
?   	github.com/docker/docker/api/server/router/checkpoint	[no test files]
?   	github.com/docker/docker/api/server/router/container	[no test files]
?   	github.com/docker/docker/api/server/router/debug	[no test files]
?   	github.com/docker/docker/api/server/router/distribution	[no test files]
?   	github.com/docker/docker/api/server/router/image	[no test files]
?   	github.com/docker/docker/api/server/router/network	[no test files]
?   	github.com/docker/docker/api/server/router/plugin	[no test files]
?   	github.com/docker/docker/api/server/router/session	[no test files]
?   	github.com/docker/docker/api/server/router/swarm	[no test files]
?   	github.com/docker/docker/api/server/router/system	[no test files]
?   	github.com/docker/docker/api/server/router/volume	[no test files]
?   	github.com/docker/docker/api/types	[no test files]
?   	github.com/docker/docker/api/types/backend	[no test files]
?   	github.com/docker/docker/api/types/blkiodev	[no test files]
?   	github.com/docker/docker/api/types/container	[no test files]
?   	github.com/docker/docker/api/types/events	[no test files]
ok  	github.com/docker/docker/api/types/filters	0.003s	coverage: 94.2% of statements
?   	github.com/docker/docker/api/types/image	[no test files]
?   	github.com/docker/docker/api/types/mount	[no test files]
?   	github.com/docker/docker/api/types/network	[no test files]
?   	github.com/docker/docker/api/types/plugins/logdriver	[no test files]
?   	github.com/docker/docker/api/types/registry	[no test files]
ok  	github.com/docker/docker/api/types/strslice	0.002s	coverage: 90.0% of statements
?   	github.com/docker/docker/api/types/swarm	[no test files]
?   	github.com/docker/docker/api/types/swarm/runtime	[no test files]
ok  	github.com/docker/docker/api/types/time	0.002s	coverage: 100.0% of statements
ok  	github.com/docker/docker/api/types/versions	0.002s	coverage: 75.0% of statements
?   	github.com/docker/docker/api/types/versions/v1p19	[no test files]
?   	github.com/docker/docker/api/types/versions/v1p20	[no test files]
?   	github.com/docker/docker/api/types/volume	[no test files]
?   	github.com/docker/docker/builder	[no test files]
?   	github.com/docker/docker/builder/builder-next	[no test files]
?   	github.com/docker/docker/builder/builder-next/adapters/containerimage	[no test files]
?   	github.com/docker/docker/builder/builder-next/adapters/snapshot	[no test files]
?   	github.com/docker/docker/builder/builder-next/exporter	[no test files]
?   	github.com/docker/docker/builder/builder-next/imagerefchecker	[no test files]
?   	github.com/docker/docker/builder/builder-next/worker	[no test files]
ok  	github.com/docker/docker/builder/dockerfile	0.387s	coverage: 45.4% of statements
ok  	github.com/docker/docker/builder/dockerignore	0.002s	coverage: 96.8% of statements
ok  	github.com/docker/docker/builder/fscache	0.111s	coverage: 69.2% of statements
ok  	github.com/docker/docker/builder/remotecontext	0.167s	coverage: 13.7% of statements
ok  	github.com/docker/docker/builder/remotecontext/git	0.565s	coverage: 78.8% of statements
?   	github.com/docker/docker/cli	[no test files]
?   	github.com/docker/docker/cli/config	[no test files]
ok  	github.com/docker/docker/cli/debug	0.002s	coverage: 100.0% of statements
ok  	github.com/docker/docker/client	0.096s	coverage: 75.6% of statements
ok  	github.com/docker/docker/cmd/dockerd	0.038s	coverage: 31.4% of statements
ok  	github.com/docker/docker/cmd/dockerd/hack	0.003s	coverage: 72.9% of statements
ok  	github.com/docker/docker/container	0.113s	coverage: 35.6% of statements
?   	github.com/docker/docker/container/stream	[no test files]
?   	github.com/docker/docker/contrib/apparmor	[no test files]
?   	github.com/docker/docker/contrib/docker-device-tool	[no test files]
?   	github.com/docker/docker/contrib/httpserver	[no test files]
ok  	github.com/docker/docker/daemon	12.131s	coverage: 17.1% of statements
ok  	github.com/docker/docker/daemon/cluster	0.030s	coverage: 0.5% of statements
ok  	github.com/docker/docker/daemon/cluster/controllers/plugin	0.008s	coverage: 65.3% of statements
ok  	github.com/docker/docker/daemon/cluster/convert	0.006s	coverage: 28.0% of statements
?   	github.com/docker/docker/daemon/cluster/executor	[no test files]
ok  	github.com/docker/docker/daemon/cluster/executor/container	3.432s	coverage: 12.6% of statements
?   	github.com/docker/docker/daemon/cluster/provider	[no test files]
ok  	github.com/docker/docker/daemon/config	0.033s	coverage: 84.8% of statements
ok  	github.com/docker/docker/daemon/discovery	0.004s	coverage: 30.4% of statements
ok  	github.com/docker/docker/daemon/events	0.057s	coverage: 50.0% of statements
?   	github.com/docker/docker/daemon/events/testutils	[no test files]
?   	github.com/docker/docker/daemon/exec	[no test files]
ok  	github.com/docker/docker/daemon/graphdriver	0.004s	coverage: 2.2% of statements
ok  	github.com/docker/docker/daemon/graphdriver/aufs	5.249s	coverage: 73.6% of statements
ok  	github.com/docker/docker/daemon/graphdriver/btrfs	0.005s	coverage: 2.9% of statements
ok  	github.com/docker/docker/daemon/graphdriver/copy	0.174s	coverage: 57.0% of statements
ok  	github.com/docker/docker/daemon/graphdriver/devmapper	2.067s	coverage: 45.9% of statements
?   	github.com/docker/docker/daemon/graphdriver/graphtest	[no test files]
ok  	github.com/docker/docker/daemon/graphdriver/overlay	0.730s	coverage: 50.8% of statements
ok  	github.com/docker/docker/daemon/graphdriver/overlay2	2.054s	coverage: 56.8% of statements
?   	github.com/docker/docker/daemon/graphdriver/overlayutils	[no test files]
ok  	github.com/docker/docker/daemon/graphdriver/quota	0.293s	coverage: 75.2% of statements
?   	github.com/docker/docker/daemon/graphdriver/register	[no test files]
ok  	github.com/docker/docker/daemon/graphdriver/vfs	0.006s	coverage: 70.5% of statements
ok  	github.com/docker/docker/daemon/graphdriver/zfs	0.004s	coverage: 3.0% of statements
ok  	github.com/docker/docker/daemon/images	0.010s	coverage: 4.9% of statements
?   	github.com/docker/docker/daemon/initlayer	[no test files]
ok  	github.com/docker/docker/daemon/links	0.003s	coverage: 93.0% of statements
?   	github.com/docker/docker/daemon/listeners	[no test files]
ok  	github.com/docker/docker/daemon/logger	0.215s	coverage: 43.7% of statements
ok  	github.com/docker/docker/daemon/logger/awslogs	0.115s	coverage: 71.7% of statements
?   	github.com/docker/docker/daemon/logger/fluentd	[no test files]
?   	github.com/docker/docker/daemon/logger/gcplogs	[no test files]
ok  	github.com/docker/docker/daemon/logger/gelf	0.005s	coverage: 68.2% of statements
ok  	github.com/docker/docker/daemon/logger/journald	0.004s	coverage: 26.2% of statements
ok  	github.com/docker/docker/daemon/logger/jsonfilelog	0.005s	coverage: 62.1% of statements
ok  	github.com/docker/docker/daemon/logger/jsonfilelog/jsonlog	0.003s	coverage: 88.3% of statements
ok  	github.com/docker/docker/daemon/logger/local	0.011s	coverage: 74.7% of statements
?   	github.com/docker/docker/daemon/logger/logentries	[no test files]
ok  	github.com/docker/docker/daemon/logger/loggerutils	0.007s	coverage: 18.6% of statements
ok  	github.com/docker/docker/daemon/logger/splunk	1.479s	coverage: 84.5% of statements
ok  	github.com/docker/docker/daemon/logger/syslog	0.004s	coverage: 47.8% of statements
ok  	github.com/docker/docker/daemon/logger/templates	0.002s	coverage: 8.3% of statements
?   	github.com/docker/docker/daemon/names	[no test files]
ok  	github.com/docker/docker/daemon/network	0.002s	coverage: 57.1% of statements
?   	github.com/docker/docker/daemon/stats	[no test files]
ok  	github.com/docker/docker/distribution	1.111s	coverage: 16.8% of statements
ok  	github.com/docker/docker/distribution/metadata	0.028s	coverage: 48.2% of statements
?   	github.com/docker/docker/distribution/utils	[no test files]
ok  	github.com/docker/docker/distribution/xfer	1.431s	coverage: 83.4% of statements
?   	github.com/docker/docker/dockerversion	[no test files]
ok  	github.com/docker/docker/errdefs	0.003s	coverage: 76.6% of statements
ok  	github.com/docker/docker/image	0.016s	coverage: 86.3% of statements
ok  	github.com/docker/docker/image/cache	0.006s	coverage: 19.2% of statements
?   	github.com/docker/docker/image/tarexport	[no test files]
ok  	github.com/docker/docker/image/v1	0.006s	coverage: 25.0% of statements
ok  	github.com/docker/docker/internal/procfs	0.003s	coverage: 78.4% of statements
?   	github.com/docker/docker/internal/test	[no test files]
?   	github.com/docker/docker/internal/test/daemon	[no test files]
?   	github.com/docker/docker/internal/test/environment	[no test files]
?   	github.com/docker/docker/internal/test/fakecontext	[no test files]
?   	github.com/docker/docker/internal/test/fakegit	[no test files]
?   	github.com/docker/docker/internal/test/fakestorage	[no test files]
?   	github.com/docker/docker/internal/test/fixtures/load	[no test files]
?   	github.com/docker/docker/internal/test/fixtures/plugin	[no test files]
?   	github.com/docker/docker/internal/test/fixtures/plugin/basic	[no test files]
?   	github.com/docker/docker/internal/test/registry	[no test files]
?   	github.com/docker/docker/internal/test/request	[no test files]
ok  	github.com/docker/docker/internal/testutil	0.002s	coverage: 62.5% of statements
ok  	github.com/docker/docker/layer	7.178s	coverage: 71.4% of statements
ok  	github.com/docker/docker/libcontainerd	0.028s	coverage: 3.4% of statements
?   	github.com/docker/docker/libcontainerd/supervisor	[no test files]
?   	github.com/docker/docker/oci	[no test files]
?   	github.com/docker/docker/oci/caps	[no test files]
ok  	github.com/docker/docker/opts	0.017s	coverage: 68.4% of statements
ok  	github.com/docker/docker/pkg/aaparser	0.002s	coverage: 50.0% of statements
ok  	github.com/docker/docker/pkg/archive	0.269s	coverage: 82.3% of statements
ok  	github.com/docker/docker/pkg/authorization	0.097s	coverage: 66.7% of statements
ok  	github.com/docker/docker/pkg/broadcaster	0.002s	coverage: 100.0% of statements
ok  	github.com/docker/docker/pkg/chrootarchive	2.801s	coverage: 37.0% of statements
?   	github.com/docker/docker/pkg/containerfs	[no test files]
?   	github.com/docker/docker/pkg/devicemapper	[no test files]
ok  	github.com/docker/docker/pkg/directory	0.003s	coverage: 80.0% of statements
ok  	github.com/docker/docker/pkg/discovery	0.003s	coverage: 58.3% of statements
ok  	github.com/docker/docker/pkg/discovery/file	0.003s	coverage: 92.9% of statements
ok  	github.com/docker/docker/pkg/discovery/kv	3.062s	coverage: 84.1% of statements
ok  	github.com/docker/docker/pkg/discovery/memory	0.003s	coverage: 92.3% of statements
ok  	github.com/docker/docker/pkg/discovery/nodes	0.003s	coverage: 93.8% of statements
ok  	github.com/docker/docker/pkg/dmesg	0.003s	coverage: 83.3% of statements
ok  	github.com/docker/docker/pkg/filenotify	0.603s	coverage: 66.3% of statements
ok  	github.com/docker/docker/pkg/fileutils	0.006s	coverage: 89.5% of statements
ok  	github.com/docker/docker/pkg/fsutils	0.151s	coverage: 85.1% of statements
ok  	github.com/docker/docker/pkg/homedir	0.003s	coverage: 41.7% of statements
ok  	github.com/docker/docker/pkg/idtools	0.260s	coverage: 70.2% of statements
ok  	github.com/docker/docker/pkg/ioutils	0.388s	coverage: 69.1% of statements
ok  	github.com/docker/docker/pkg/jsonmessage	0.003s	coverage: 88.3% of statements
ok  	github.com/docker/docker/pkg/locker	0.011s	coverage: 88.9% of statements
ok  	github.com/docker/docker/pkg/longpath	0.002s	coverage: 100.0% of statements
?   	github.com/docker/docker/pkg/loopback	[no test files]
ok  	github.com/docker/docker/pkg/mount	0.476s	coverage: 68.6% of statements
ok  	github.com/docker/docker/pkg/namesgenerator	0.002s	coverage: 85.7% of statements
?   	github.com/docker/docker/pkg/namesgenerator/cmd/names-generator	[no test files]
ok  	github.com/docker/docker/pkg/parsers	0.002s	coverage: 97.0% of statements
ok  	github.com/docker/docker/pkg/parsers/kernel	0.002s	coverage: 60.0% of statements
ok  	github.com/docker/docker/pkg/parsers/operatingsystem	0.002s	coverage: 90.0% of statements
ok  	github.com/docker/docker/pkg/pidfile	0.002s	coverage: 82.4% of statements
?   	github.com/docker/docker/pkg/platform	[no test files]
?   	github.com/docker/docker/pkg/plugingetter	[no test files]
ok  	github.com/docker/docker/pkg/plugins	33.616s	coverage: 76.8% of statements
ok  	github.com/docker/docker/pkg/plugins/pluginrpc-gen	0.008s	coverage: 56.8% of statements
?   	github.com/docker/docker/pkg/plugins/pluginrpc-gen/fixtures	[no test files]
?   	github.com/docker/docker/pkg/plugins/pluginrpc-gen/fixtures/otherfixture	[no test files]
ok  	github.com/docker/docker/pkg/plugins/transport	0.003s	coverage: 85.7% of statements
ok  	github.com/docker/docker/pkg/pools	0.002s	coverage: 87.9% of statements
ok  	github.com/docker/docker/pkg/progress	0.002s	coverage: 75.9% of statements
ok  	github.com/docker/docker/pkg/pubsub	1.036s	coverage: 72.7% of statements
ok  	github.com/docker/docker/pkg/reexec	0.007s	coverage: 82.4% of statements
ok  	github.com/docker/docker/pkg/signal	2.379s	coverage: 61.0% of statements
?   	github.com/docker/docker/pkg/signal/testfiles	[no test files]
ok  	github.com/docker/docker/pkg/stdcopy	0.003s	coverage: 100.0% of statements
ok  	github.com/docker/docker/pkg/streamformatter	0.003s	coverage: 66.2% of statements
ok  	github.com/docker/docker/pkg/stringid	0.002s	coverage: 76.0% of statements
ok  	github.com/docker/docker/pkg/symlink	0.006s	coverage: 87.7% of statements
ok  	github.com/docker/docker/pkg/sysinfo	0.004s	coverage: 75.8% of statements
ok  	github.com/docker/docker/pkg/system	0.010s	coverage: 36.1% of statements
ok  	github.com/docker/docker/pkg/tailfile	0.017s	coverage: 88.6% of statements
ok  	github.com/docker/docker/pkg/tarsum	0.047s	coverage: 89.3% of statements
ok  	github.com/docker/docker/pkg/term	0.003s	coverage: 84.8% of statements
ok  	github.com/docker/docker/pkg/term/windows	0.002s	coverage: 0.0% of statements [no tests to run]
ok  	github.com/docker/docker/pkg/truncindex	0.103s	coverage: 91.5% of statements
ok  	github.com/docker/docker/pkg/urlutil	0.002s	coverage: 100.0% of statements
ok  	github.com/docker/docker/pkg/useragent	0.002s	coverage: 88.9% of statements
ok  	github.com/docker/docker/plugin	0.534s	coverage: 27.3% of statements
ok  	github.com/docker/docker/plugin/executor/containerd	0.007s	coverage: 33.3% of statements
ok  	github.com/docker/docker/plugin/v2	0.003s	coverage: 14.5% of statements
?   	github.com/docker/docker/profiles/apparmor	[no test files]
ok  	github.com/docker/docker/profiles/seccomp	0.004s	coverage: 79.4% of statements
ok  	github.com/docker/docker/reference	0.007s	coverage: 84.4% of statements
ok  	github.com/docker/docker/registry	0.103s	coverage: 57.0% of statements
ok  	github.com/docker/docker/registry/resumable	0.016s	coverage: 100.0% of statements
ok  	github.com/docker/docker/restartmanager	0.002s	coverage: 49.0% of statements
ok  	github.com/docker/docker/runconfig	0.006s	coverage: 68.2% of statements
?   	github.com/docker/docker/runconfig/opts	[no test files]
?   	github.com/docker/docker/volume	[no test files]
ok  	github.com/docker/docker/volume/drivers	0.005s	coverage: 36.1% of statements
ok  	github.com/docker/docker/volume/local	0.024s	coverage: 73.0% of statements
ok  	github.com/docker/docker/volume/mounts	0.025s	coverage: 66.8% of statements
ok  	github.com/docker/docker/volume/service	0.015s	coverage: 73.0% of statements
?   	github.com/docker/docker/volume/service/opts	[no test files]
?   	github.com/docker/docker/volume/testutils	[no test files]

  _____          _
 / ____|        | |
| |     ___   __| | ___  ___ _____   __
| |    / _ \ / _` |/ _ \/ __/ _ \ \ / /
| |___| (_) | (_| |  __/ (_| (_) \ V /
 \_____\___/ \__,_|\___|\___\___/ \_/
                              Bash-0b37652


x> No CI provider detected.
    Testing inside Docker? http://docs.codecov.io/docs/testing-with-docker
    Testing with Tox? https://docs.codecov.io/docs/python#section-testing-with-tox
    project root: .
--> token set from env
    Yaml found at: codecov.yml
    -> Found 1 reports
==> Detecting git/mercurial file structure
==> Reading reports
    + coverage.txt bytes=1662557
==> Appending adjustments
    http://docs.codecov.io/docs/fixing-reports
    + Found adjustments
==> Gzipping contents
==> Uploading reports
    url: https://codecov.io
    query: branch=&commit=ca1c1ea0b0426b0f578bf870e3e877a020fc4104&build=&build_url=&name=&tag=&slug=moby%2Fmoby&service=&flags=&pr=&job=
    -> Pinging Codecov
    -> Uploading
    -> View reports at https://codecov.io/github/moby/moby/commit/ca1c1ea0b0426b0f578bf870e3e877a020fc4104

Removing bundles/

---> Making bundle: binary-daemon (in bundles/binary-daemon)
Building: bundles/binary-daemon/dockerd-dev
Created binary: bundles/binary-daemon/dockerd-dev
Copying nested executables into bundles/binary-daemon

---> Making bundle: dynbinary (in bundles/dynbinary)
Building: bundles/dynbinary-daemon/dockerd-dev
Created binary: bundles/dynbinary-daemon/dockerd-dev

---> Making bundle: test-docker-py (in bundles/test-docker-py)
---> Making bundle: .integration-daemon-start (in bundles/test-docker-py)
Using test binary docker
/etc/init.d/apparmor: 130: /etc/init.d/apparmor: systemd-detect-virt: not found
Starting AppArmor profiles:Warning from stdin (line 1): /sbin/apparmor_parser: cannot use or update cache, disable, or force-complain via stdin
Warning failed to create cache: (null)
.
INFO: Waiting for daemon to start...
Starting dockerd
.
============================= test session starts ==============================
platform linux2 -- Python 2.7.13, pytest-2.9.1, py-1.7.0, pluggy-0.3.1
rootdir: /docker-py, inifile: pytest.ini
plugins: cov-2.1.0
collected 338 items

../../../../../docker-py/tests/integration/api_build_test.py ....s..s........
../../../../../docker-py/tests/integration/api_client_test.py .......
../../../../../docker-py/tests/integration/api_config_test.py .....
../../../../../docker-py/tests/integration/api_container_test.py ....x....x.......x............................................................
../../../../../docker-py/tests/integration/api_exec_test.py .............
../../../../../docker-py/tests/integration/api_healthcheck_test.py ....
../../../../../docker-py/tests/integration/api_image_test.py ...s........s....
../../../../../docker-py/tests/integration/api_network_test.py ...........................
../../../../../docker-py/tests/integration/api_plugin_test.py ...../tmp/jenkins740346145648976604.sh: line 26:  8384 Terminated              docker run --rm -t --privileged -v "$WORKSPACE/bundles:/go/src/github.com/docker/docker/bundles" -v "$WORKSPACE/.git:/go/src/github.com/docker/docker/.git" --name docker-pr$BUILD_NUMBER -e DOCKER_GITCOMMIT=${GITCOMMIT} -e DOCKER_GRAPHDRIVER=vfs -e DOCKER_EXECDRIVER=native -e CODECOV_TOKEN -e GIT_SHA1 docker:$GITCOMMIT hack/ci/janky
Set build name.
New build name is '#38452'
Build was aborted
Aborted by Gordon
[PostBuildScript] - Executing post build scripts.
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins2271672871857701390.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr52347
docker-pr52347
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs] $ /bin/sh -xe /tmp/jenkins4361001099207623746.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ + xargs tarfind bundles -name *.log -czf -o bundles.tar.gz -name
 *.prof -o -name integration.test
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: ABORTED
