Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-aufs (i-0699462f0588c06db) (docker-edge ubuntu aufs docker-stable docker ubuntu-1604-aufs-edge x86_64 ec2 linux ubuntu-1604-aufs ubuntu-1604 amd64 ubuntu-1604-aufs-stable) in workspace /home/ubuntu/workspace/Docker-PRs-experimental
No credentials specified
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs-experimental # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision 8d760280a232f98d92440539e1e8a8f66c213bdb (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f 8d760280a232f98d92440539e1e8a8f66c213bdb
Commit message: "Merge pull request #39275 from wiktor-k/move-var-run-to-run"
 > git rev-list --no-walk 8d760280a232f98d92440539e1e8a8f66c213bdb # timeout=10
Set build name.
New build name is '#39292'
[Docker-PRs-experimental] $ /bin/bash /tmp/jenkins7098742645706506680.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/39292/head -> origin/pr/39292
Updating 8d76028..8978894
Fast-forward
 daemon/archive.go                    |  15 ++--
 daemon/export.go                     |   2 +-
 pkg/chrootarchive/archive.go         |  32 +++++++-
 pkg/chrootarchive/archive_unix.go    | 137 ++++++++++++++++++++++++++++++++++-
 pkg/chrootarchive/archive_windows.go |   9 ++-
 pkg/chrootarchive/init_unix.go       |   1 +
 6 files changed, 179 insertions(+), 17 deletions(-)
Sending build context to Docker daemon     48MB
Step 1/112 : ARG CROSS="false"
Step 2/112 : FROM golang:1.12.5 AS base
 ---> 7ced090ee82e
Step 3/112 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> ea5785331394
Step 4/112 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> f2764412985b
Step 5/112 : FROM base AS criu
 ---> f2764412985b
Step 6/112 : ENV CRIU_VERSION 3.11
 ---> Using cache
 ---> 402b08ce42d7
Step 7/112 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> 50347f19122c
Step 8/112 : FROM base AS registry
 ---> f2764412985b
Step 9/112 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> f037ba5f76c0
Step 10/112 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> a40ef93c2a0f
Step 11/112 : FROM base AS docker-py
 ---> f2764412985b
Step 12/112 : ENV DOCKER_PY_COMMIT ac922192959870774ad8428344d9faa0555f7ba6
 ---> Using cache
 ---> b77b242d7f43
Step 13/112 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 377b89c3ef21
Step 14/112 : FROM base AS swagger
 ---> f2764412985b
Step 15/112 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> cc9b8333bac7
Step 16/112 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 9655870d0f5a
Step 17/112 : FROM base AS frozen-images
 ---> f2764412985b
Step 18/112 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 0c4406c3a45d
Step 19/112 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> 2baa46d950ec
Step 20/112 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> ce794c2de352
Step 21/112 : FROM base AS cross-false
 ---> f2764412985b
Step 22/112 : FROM base AS cross-true
 ---> f2764412985b
Step 23/112 : RUN dpkg --add-architecture armhf
 ---> Using cache
 ---> 67154406a7a3
Step 24/112 : RUN dpkg --add-architecture arm64
 ---> Using cache
 ---> 51949e8c5f0a
Step 25/112 : RUN dpkg --add-architecture armel
 ---> Using cache
 ---> 4ebfc1ddfc40
Step 26/112 : RUN if [ "$(go env GOHOSTARCH)" = "amd64" ]; then 	apt-get update 	&& apt-get install -y --no-install-recommends 		crossbuild-essential-armhf 		crossbuild-essential-arm64 		crossbuild-essential-armel; 	fi
 ---> Using cache
 ---> f58ce574c8b8
Step 27/112 : FROM cross-${CROSS} as dev-base
 ---> f2764412985b
Step 28/112 : FROM dev-base AS runtime-dev-cross-false
 ---> f2764412985b
Step 29/112 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> 1f82e935985f
Step 30/112 : FROM cross-true AS runtime-dev-cross-true
 ---> f58ce574c8b8
Step 31/112 : RUN if [ "$(go env GOHOSTARCH)" = "amd64" ]; then 	apt-get update 	&& apt-get install -y 		libseccomp-dev:armhf 		libseccomp-dev:arm64 		libseccomp-dev:armel 		libapparmor-dev:armhf 		libapparmor-dev:arm64 		libapparmor-dev:armel 		libapparmor-dev 		libseccomp-dev; 	fi
 ---> Using cache
 ---> 9923c63265d0
Step 32/112 : FROM runtime-dev-cross-${CROSS} AS runtime-dev
 ---> 1f82e935985f
Step 33/112 : FROM base AS tomlv
 ---> f2764412985b
Step 34/112 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> 8386f4c61353
Step 35/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> ad8990bb5832
Step 36/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> c253858fba1c
Step 37/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 5d1ab13b0f18
Step 38/112 : FROM base AS vndr
 ---> f2764412985b
Step 39/112 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> 596d11a02e34
Step 40/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 0b32e10b15c4
Step 41/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> a93e17e4a03e
Step 42/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> d28a6a84830c
Step 43/112 : FROM dev-base AS containerd
 ---> f2764412985b
Step 44/112 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> 27f056915065
Step 45/112 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> 3067ce2d4bd6
Step 46/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> ac91913cf6e7
Step 47/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> e30797c6e91f
Step 48/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> a1f3bb3ddb8d
Step 49/112 : FROM dev-base AS proxy
 ---> f2764412985b
Step 50/112 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> a143aaa00563
Step 51/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 174de897f308
Step 52/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 0397fdac5b32
Step 53/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> a8a258fde466
Step 54/112 : FROM base AS gometalinter
 ---> f2764412985b
Step 55/112 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 2128f98e781e
Step 56/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> ad931cea41be
Step 57/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> ea801ae83aa6
Step 58/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> cfd92e4ee57f
Step 59/112 : FROM dev-base AS dockercli
 ---> f2764412985b
Step 60/112 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> 91e6be6dca9a
Step 61/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> b855212c4f80
Step 62/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 9ed3f4ff9fb9
Step 63/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 3efb63fd1cdd
Step 64/112 : FROM runtime-dev AS runc
 ---> 1f82e935985f
Step 65/112 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> f7d786e89ecc
Step 66/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 9b73937e5e36
Step 67/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> e2184342acfe
Step 68/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> fb7559f485c2
Step 69/112 : FROM dev-base AS tini
 ---> f2764412985b
Step 70/112 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> ee36a38e48e6
Step 71/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 8928354bbbc9
Step 72/112 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> d315c3eaba5b
Step 73/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 2e463997669b
Step 74/112 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 213d7fc25885
Step 75/112 : FROM dev-base AS rootlesskit
 ---> f2764412985b
Step 76/112 : ENV INSTALL_BINARY_NAME=rootlesskit
 ---> Using cache
 ---> 1cc23bed66df
Step 77/112 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> fcdb01434d41
Step 78/112 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> f49385dd5d5d
Step 79/112 : RUN PREFIX=/build/ ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> b8f09fd6131f
Step 80/112 : COPY ./contrib/dockerd-rootless.sh /build
 ---> Using cache
 ---> 21741374456b
Step 81/112 : FROM runtime-dev AS dev
 ---> 1f82e935985f
Step 82/112 : RUN groupadd -r docker
 ---> Using cache
 ---> c6f76c5490fc
Step 83/112 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> 00c63cd10e19
Step 84/112 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> 5e20cfd4659a
Step 85/112 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> 50e9c18c4cbd
Step 86/112 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 3645390c480d
Step 87/112 : RUN ldconfig
 ---> Using cache
 ---> 7ae7a1621db6
Step 88/112 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libffi-dev 	libssl-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-cffi 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	libprotobuf-c1 	libnet1 	libnl-3-200 	--no-install-recommends
 ---> Using cache
 ---> 1999996be7a8
Step 89/112 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> 12461279615a
Step 90/112 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> eb764154e814
Step 91/112 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> da0fb0f80e5e
Step 92/112 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> 70d8bfdf867f
Step 93/112 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> b6a827898984
Step 94/112 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> 570efe73d81e
Step 95/112 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> a65322cb6c36
Step 96/112 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> 5d2119d75486
Step 97/112 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> b550ec0e76ed
Step 98/112 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 1bfdb459c08b
Step 99/112 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> db971bafe8f9
Step 100/112 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> eda9eef1ab05
Step 101/112 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> de8f446397a5
Step 102/112 : RUN cd /docker-py 	&& pip install docker-pycreds==0.4.0 	&& pip install paramiko==2.4.2 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 56ee9d57f3a4
Step 103/112 : COPY --from=rootlesskit /build/ /usr/local/bin/
 ---> Using cache
 ---> e4f6b59620e0
Step 104/112 : COPY --from=djs55/vpnkit@sha256:e508a17cfacc8fd39261d5b4e397df2b953690da577e2c987a47630cd0c42f8e /vpnkit /usr/local/bin/vpnkit.x86_64
 ---> Using cache
 ---> d52e7c29e05b
Step 105/112 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> dec0a5aaf639
Step 106/112 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> f79b53704b73
Step 107/112 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> dcadbc602581
Step 108/112 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> 0f6b3387563c
Step 109/112 : VOLUME /var/lib/docker
 ---> Using cache
 ---> 0a34d1c51062
Step 110/112 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> b3c44ac60fbe
Step 111/112 : FROM dev AS final
 ---> b3c44ac60fbe
Step 112/112 : COPY . /go/src/github.com/docker/docker
 ---> da07860bd6ea
Successfully built da07860bd6ea
Successfully tagged docker:8978894-exp

Removing bundles/

---> Making bundle: binary-daemon (in bundles/binary-daemon)
Building: bundles/binary-daemon/dockerd-dev
GOOS="" GOARCH="" GOARM=""
Created binary: bundles/binary-daemon/dockerd-dev
Copying nested executables into bundles/binary-daemon

---> Making bundle: test-integration (in bundles/test-integration)
Building test suite binary ./integration-cli/test.main
/tmp/jenkins7098742645706506680.sh: line 21: 16793 Terminated              docker run --rm -t --privileged -v "$WORKSPACE/bundles:/go/src/github.com/docker/docker/bundles" -e DOCKER_EXPERIMENTAL=y --name docker-pr-exp$BUILD_NUMBER -e DOCKER_GITCOMMIT=${GITCOMMIT} -e DOCKER_GRAPHDRIVER=vfs -e DOCKER_EXECDRIVER=native docker:${GITCOMMIT}-exp hack/ci/experimental
Set build name.
New build name is '#39292'
Build was aborted
Aborted by Gordon
[PostBuildScript] - Executing post build scripts.
[Docker-PRs-experimental] $ /bin/sh -xe /tmp/jenkins7468904813686565098.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr-exp45486
docker-pr-exp45486
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs-experimental:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs-experimental] $ /bin/sh -xe /tmp/jenkins5222963134263776593.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ xargs tar -czf bundles.tar.gz
+ find bundles -name *.log
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: ABORTED
