Started by user Gordon
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[EnvInject] - Loading node environment variables.
Building remotely on ubuntu-1604-aufs-stable (i-06ae2c8dddd49d825) (docker-edge ubuntu aufs docker-stable docker ubuntu-1604-aufs-edge x86_64 ec2 linux ubuntu-1604-aufs ubuntu-1604 amd64 ubuntu-1604-aufs-stable us-west-2) in workspace /home/ubuntu/workspace/Docker-PRs-experimental
Wiping out workspace first.
Cloning the remote Git repository
Cloning repository https://github.com/moby/moby.git
 > git init /home/ubuntu/workspace/Docker-PRs-experimental # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git --version # timeout=10
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
 > git config --add remote.origin.fetch +refs/heads/*:refs/remotes/origin/* # timeout=10
 > git config remote.origin.url https://github.com/moby/moby.git # timeout=10
Fetching upstream changes from https://github.com/moby/moby.git
 > git fetch --tags --progress https://github.com/moby/moby.git +refs/heads/*:refs/remotes/origin/*
 > git rev-parse origin/master^{commit} # timeout=10
Checking out Revision f76d6a078d881f410c00e8d900dcdfc2e026c841 (origin/master)
 > git config core.sparsecheckout # timeout=10
 > git checkout -f f76d6a078d881f410c00e8d900dcdfc2e026c841
Commit message: "Merge pull request #38370 from farnasirim/36413-bind-dir-skip-copy"
 > git rev-list --no-walk f76d6a078d881f410c00e8d900dcdfc2e026c841 # timeout=10
Set build name.
New build name is '#38432'
[Docker-PRs-experimental] $ /bin/bash /tmp/jenkins2174880592759889888.sh
From https://github.com/moby/moby
 * [new ref]         refs/pull/38432/head -> origin/pr/38432
Merge made by the 'recursive' strategy.
 hack/ci/windows.ps1                                |   9 +-
 integration-cli/check_test.go                      |   3 +-
 integration-cli/docker_api_swarm_node_test.go      |   2 -
 integration-cli/docker_api_swarm_service_test.go   |  79 ---------
 .../docker_api_swarm_service_unix_test.go          |  90 ++++++++++
 integration-cli/docker_api_swarm_test.go           |   2 -
 integration-cli/docker_cli_swarm_test.go           | 196 ---------------------
 integration-cli/docker_cli_swarm_unix_test.go      | 195 ++++++++++++++++++++
 internal/test/daemon/daemon.go                     |  17 +-
 internal/test/daemon/daemon_unix.go                |   6 +
 internal/test/daemon/daemon_windows.go             |   6 +
 internal/test/daemon/swarm.go                      |   4 -
 internal/test/daemon/swarm_unix.go                 |   7 +
 internal/test/daemon/swarm_windows.go              |   7 +
 14 files changed, 325 insertions(+), 298 deletions(-)
 create mode 100644 integration-cli/docker_api_swarm_service_unix_test.go
 create mode 100644 internal/test/daemon/swarm_unix.go
 create mode 100644 internal/test/daemon/swarm_windows.go
Sending build context to Docker daemon  45.09MB
Step 1/94 : FROM golang:1.11.4 AS base
 ---> 343df9d12b7b
Step 2/94 : ARG APT_MIRROR=deb.debian.org
 ---> Using cache
 ---> 663bb69aba90
Step 3/94 : RUN sed -ri "s/(httpredir|deb).debian.org/$APT_MIRROR/g" /etc/apt/sources.list
 ---> Using cache
 ---> 8af47960fb68
Step 4/94 : FROM base AS criu
 ---> 8af47960fb68
Step 5/94 : ENV CRIU_VERSION 3.6
 ---> Using cache
 ---> b31c7e7d237a
Step 6/94 : RUN apt-get update && apt-get install -y 	libnet-dev 	libprotobuf-c0-dev 	libprotobuf-dev 	libnl-3-dev 	libcap-dev 	protobuf-compiler 	protobuf-c-compiler 	python-protobuf 	&& mkdir -p /usr/src/criu 	&& curl -sSL https://github.com/checkpoint-restore/criu/archive/v${CRIU_VERSION}.tar.gz | tar -C /usr/src/criu/ -xz --strip-components=1 	&& cd /usr/src/criu 	&& make 	&& make PREFIX=/build/ install-criu
 ---> Using cache
 ---> e15644189d9e
Step 7/94 : FROM base AS registry
 ---> 8af47960fb68
Step 8/94 : ENV REGISTRY_COMMIT_SCHEMA1 ec87e9b6971d831f0eff752ddb54fb64693e51cd
 ---> Using cache
 ---> 0f46fb12e853
Step 9/94 : ENV REGISTRY_COMMIT 47a064d4195a9b56133891bbb13620c3ac83a827
 ---> Using cache
 ---> 6aeaf5b4933b
Step 10/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/docker/distribution.git "$GOPATH/src/github.com/docker/distribution" 	&& (cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT") 	&& GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH" 		go build -buildmode=pie -o /build/registry-v2 github.com/docker/distribution/cmd/registry 	&& case $(dpkg --print-architecture) in 		amd64|ppc64*|s390x) 		(cd "$GOPATH/src/github.com/docker/distribution" && git checkout -q "$REGISTRY_COMMIT_SCHEMA1"); 		GOPATH="$GOPATH/src/github.com/docker/distribution/Godeps/_workspace:$GOPATH"; 			go build -buildmode=pie -o /build/registry-v2-schema1 github.com/docker/distribution/cmd/registry; 		;; 	   esac 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> 63ab40004979
Step 11/94 : FROM base AS docker-py
 ---> 8af47960fb68
Step 12/94 : ENV DOCKER_PY_COMMIT 8b246db271a85d6541dc458838627e89c683e42f
 ---> Using cache
 ---> e7817545a446
Step 13/94 : RUN git clone https://github.com/docker/docker-py.git /build 	&& cd /build 	&& git checkout -q $DOCKER_PY_COMMIT
 ---> Using cache
 ---> 02eb4c82cc40
Step 14/94 : FROM base AS swagger
 ---> 8af47960fb68
Step 15/94 : ENV GO_SWAGGER_COMMIT c28258affb0b6251755d92489ef685af8d4ff3eb
 ---> Using cache
 ---> 8871368d3f61
Step 16/94 : RUN set -x 	&& export GOPATH="$(mktemp -d)" 	&& git clone https://github.com/go-swagger/go-swagger.git "$GOPATH/src/github.com/go-swagger/go-swagger" 	&& (cd "$GOPATH/src/github.com/go-swagger/go-swagger" && git checkout -q "$GO_SWAGGER_COMMIT") 	&& go build -o /build/swagger github.com/go-swagger/go-swagger/cmd/swagger 	&& rm -rf "$GOPATH"
 ---> Using cache
 ---> a4a69780c3eb
Step 17/94 : FROM base AS frozen-images
 ---> 8af47960fb68
Step 18/94 : RUN apt-get update && apt-get install -y jq ca-certificates --no-install-recommends
 ---> Using cache
 ---> 6251f330f3f8
Step 19/94 : COPY contrib/download-frozen-image-v2.sh /
 ---> Using cache
 ---> 01f52a469c43
Step 20/94 : RUN /download-frozen-image-v2.sh /build 	buildpack-deps:jessie@sha256:dd86dced7c9cd2a724e779730f0a53f93b7ef42228d4344b25ce9a42a1486251 	busybox:latest@sha256:bbc3a03235220b170ba48a157dd097dd1379299370e1ed99ce976df0355d24f0 	busybox:glibc@sha256:0b55a30394294ab23b9afd58fab94e61a923f5834fba7ddbae7f8e0c11ba85e6 	debian:jessie@sha256:287a20c5f73087ab406e6b364833e3fb7b3ae63ca0eb3486555dc27ed32c6e60 	hello-world:latest@sha256:be0cd392e45be79ffeffa6b05338b98ebb16c87b255f48e297ec7f98e123905c
 ---> Using cache
 ---> fe4d53874df8
Step 21/94 : FROM base AS runtime-dev
 ---> 8af47960fb68
Step 22/94 : RUN apt-get update && apt-get install -y 	libapparmor-dev 	libseccomp-dev
 ---> Using cache
 ---> af3d139c12bb
Step 23/94 : FROM base AS tomlv
 ---> 8af47960fb68
Step 24/94 : ENV INSTALL_BINARY_NAME=tomlv
 ---> Using cache
 ---> 3e49e19ad7b6
Step 25/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 50beba03ec48
Step 26/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 9f9fc8b82882
Step 27/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 85f52616c6a0
Step 28/94 : FROM base AS vndr
 ---> 8af47960fb68
Step 29/94 : ENV INSTALL_BINARY_NAME=vndr
 ---> Using cache
 ---> c107cc45af13
Step 30/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 668446854b77
Step 31/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 16478b5491a3
Step 32/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 67a3501e706b
Step 33/94 : FROM base AS containerd
 ---> 8af47960fb68
Step 34/94 : RUN apt-get update && apt-get install -y btrfs-tools
 ---> Using cache
 ---> d3aec9c3c6d1
Step 35/94 : ENV INSTALL_BINARY_NAME=containerd
 ---> Using cache
 ---> 991378289831
Step 36/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> b7d81ec1fcd3
Step 37/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 6359907ed055
Step 38/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> dbb750bff86a
Step 39/94 : FROM base AS proxy
 ---> 8af47960fb68
Step 40/94 : ENV INSTALL_BINARY_NAME=proxy
 ---> Using cache
 ---> 7cd57ace10b5
Step 41/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 1b2efbc8c481
Step 42/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> aa409a9df591
Step 43/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 729e691c590c
Step 44/94 : FROM base AS gometalinter
 ---> 8af47960fb68
Step 45/94 : ENV INSTALL_BINARY_NAME=gometalinter
 ---> Using cache
 ---> 63dc3b8421b5
Step 46/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 738e82c8c87b
Step 47/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> f4f0581c9c0d
Step 48/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> b18b052438c4
Step 49/94 : FROM base AS dockercli
 ---> 8af47960fb68
Step 50/94 : ENV INSTALL_BINARY_NAME=dockercli
 ---> Using cache
 ---> 8388923bba31
Step 51/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 73e3d78b5d7c
Step 52/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 86fdf451baf2
Step 53/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 9db7d90cbf20
Step 54/94 : FROM runtime-dev AS runc
 ---> af3d139c12bb
Step 55/94 : ENV INSTALL_BINARY_NAME=runc
 ---> Using cache
 ---> 189373a977cd
Step 56/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> c2b133d31515
Step 57/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 32b32d235a0f
Step 58/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> 9d0e55a802b4
Step 59/94 : FROM base AS tini
 ---> 8af47960fb68
Step 60/94 : RUN apt-get update && apt-get install -y cmake vim-common
 ---> Using cache
 ---> 0eb351a3caa7
Step 61/94 : COPY hack/dockerfile/install/install.sh ./install.sh
 ---> Using cache
 ---> 641d87dd7a90
Step 62/94 : ENV INSTALL_BINARY_NAME=tini
 ---> Using cache
 ---> 5aa81931b24a
Step 63/94 : COPY hack/dockerfile/install/$INSTALL_BINARY_NAME.installer ./
 ---> Using cache
 ---> 06ac314b5a3c
Step 64/94 : RUN PREFIX=/build ./install.sh $INSTALL_BINARY_NAME
 ---> Using cache
 ---> fa353398a9a1
Step 65/94 : FROM runtime-dev AS dev
 ---> af3d139c12bb
Step 66/94 : RUN groupadd -r docker
 ---> Using cache
 ---> 3b26ad114599
Step 67/94 : RUN useradd --create-home --gid docker unprivilegeduser
 ---> Using cache
 ---> 1ad082bcf041
Step 68/94 : RUN ln -sfv /go/src/github.com/docker/docker/.bashrc ~/.bashrc
 ---> Using cache
 ---> 925831ba1d27
Step 69/94 : RUN echo "source /usr/share/bash-completion/bash_completion" >> /etc/bash.bashrc
 ---> Using cache
 ---> 6fc77ac8d6c6
Step 70/94 : RUN ln -s /usr/local/completion/bash/docker /etc/bash_completion.d/docker
 ---> Using cache
 ---> 8358d47ebe95
Step 71/94 : RUN ldconfig
 ---> Using cache
 ---> aa7e84a40668
Step 72/94 : RUN apt-get update && apt-get install -y 	apparmor 	aufs-tools 	bash-completion 	btrfs-tools 	iptables 	jq 	libcap2-bin 	libdevmapper-dev 	libudev-dev 	libsystemd-dev 	binutils-mingw-w64 	g++-mingw-w64-x86-64 	net-tools 	pigz 	python-backports.ssl-match-hostname 	python-dev 	python-mock 	python-pip 	python-requests 	python-setuptools 	python-websocket 	python-wheel 	thin-provisioning-tools 	vim 	vim-common 	xfsprogs 	zip 	bzip2 	xz-utils 	--no-install-recommends
 ---> Using cache
 ---> 7fe12d389b30
Step 73/94 : COPY --from=swagger /build/swagger* /usr/local/bin/
 ---> Using cache
 ---> 8a32b44ce424
Step 74/94 : COPY --from=frozen-images /build/ /docker-frozen-images
 ---> Using cache
 ---> bacc0a30d019
Step 75/94 : COPY --from=gometalinter /build/ /usr/local/bin/
 ---> Using cache
 ---> 193e165ead9d
Step 76/94 : COPY --from=tomlv /build/ /usr/local/bin/
 ---> Using cache
 ---> d702fec23f5d
Step 77/94 : COPY --from=vndr /build/ /usr/local/bin/
 ---> Using cache
 ---> 947f3b4ebfd3
Step 78/94 : COPY --from=tini /build/ /usr/local/bin/
 ---> Using cache
 ---> 8466c0832fdb
Step 79/94 : COPY --from=runc /build/ /usr/local/bin/
 ---> Using cache
 ---> 4cd0fbf1bd4b
Step 80/94 : COPY --from=containerd /build/ /usr/local/bin/
 ---> Using cache
 ---> e520b32e4f20
Step 81/94 : COPY --from=proxy /build/ /usr/local/bin/
 ---> Using cache
 ---> a17be569d15f
Step 82/94 : COPY --from=dockercli /build/ /usr/local/cli
 ---> Using cache
 ---> 0978dee895cd
Step 83/94 : COPY --from=registry /build/registry* /usr/local/bin/
 ---> Using cache
 ---> 6845fc008cee
Step 84/94 : COPY --from=criu /build/ /usr/local/
 ---> Using cache
 ---> a814c38fa20c
Step 85/94 : COPY --from=docker-py /build/ /docker-py
 ---> Using cache
 ---> 660ae1475b26
Step 86/94 : RUN cd /docker-py 	&& pip install docker-pycreds==0.2.1 	&& pip install yamllint==1.5.0 	&& pip install -r test-requirements.txt
 ---> Using cache
 ---> 48a840d7865d
Step 87/94 : ENV PATH=/usr/local/cli:$PATH
 ---> Using cache
 ---> 4d618c87753a
Step 88/94 : ENV DOCKER_BUILDTAGS apparmor seccomp selinux
 ---> Using cache
 ---> 3539366c0e38
Step 89/94 : ENV GOMETALINTER_OPTS="--deadline=2m"
 ---> Using cache
 ---> 4e9d4169f8ab
Step 90/94 : WORKDIR /go/src/github.com/docker/docker
 ---> Using cache
 ---> aa2ccd2b298e
Step 91/94 : VOLUME /var/lib/docker
 ---> Using cache
 ---> 8548b170a2e4
Step 92/94 : ENTRYPOINT ["hack/dind"]
 ---> Using cache
 ---> 27bafc0b0b37
Step 93/94 : FROM dev AS final
 ---> 27bafc0b0b37
Step 94/94 : COPY . /go/src/github.com/docker/docker
 ---> 262e67383d38
Successfully built 262e67383d38
Successfully tagged docker:90d73f0-exp

Removing bundles/

---> Making bundle: binary-daemon (in bundles/binary-daemon)
Building: bundles/binary-daemon/dockerd-dev
Created binary: bundles/binary-daemon/dockerd-dev
Copying nested executables into bundles/binary-daemon

---> Making bundle: test-integration (in bundles/test-integration)
Building test suite binary ./integration-cli/test.main
# github.com/docker/docker/internal/test/daemon
internal/test/daemon/daemon.go:268:23: undefined: dockerdBinary
Build step 'Execute shell' marked build as failure
Set build name.
New build name is '#38432'
[PostBuildScript] - Executing post build scripts.
[Docker-PRs-experimental] $ /bin/sh -xe /tmp/jenkins1842906343406892227.sh
+ echo Ensuring container killed.
Ensuring container killed.
+ docker rm -vf docker-pr-exp43483
Error: No such container: docker-pr-exp43483
+ true
+ echo Chowning /workspace to jenkins user
Chowning /workspace to jenkins user
+ id -u
+ id -g
+ docker run --rm -v /home/ubuntu/workspace/Docker-PRs-experimental:/workspace busybox chown -R 1000:1000 /workspace
[Docker-PRs-experimental] $ /bin/sh -xe /tmp/jenkins1264261968294072068.sh
+ echo Creating bundles.tar.gz
Creating bundles.tar.gz
+ xargs tar -czf bundles.tar.gz
+ find bundles -name *.log
Archiving artifacts
Notifying endpoint with url 'https://leeroy.dockerproject.org/notification/jenkins'
[WS-CLEANUP] Deleting project workspace...[WS-CLEANUP] done
Finished: FAILURE
